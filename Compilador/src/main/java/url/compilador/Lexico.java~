// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/url/compilador/jflex/Reglas.flex

/* Seccion 1*/
package url.compilador;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.logging.Level;
import java.util.logging.Logger;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\12\0\1\1\2\2\1\3\22\0\1\4\1\5\1\6"+
    "\2\0\1\7\2\0\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\11\21\1\22\1\23\1\24"+
    "\1\25\1\26\2\0\1\27\2\30\1\31\11\30\1\32"+
    "\1\33\1\34\1\30\1\35\10\30\3\0\1\7\1\36"+
    "\1\0\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\2\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\50\1\56\1\57\1\60\1\61\1\62\1\50\1\63"+
    "\2\50\12\0\1\2\u01a2\0\2\2\326\0\u0100\2";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\5\2\13\1\14\1\15"+
    "\1\16\1\17\1\20\4\21\17\22\1\23\1\0\1\24"+
    "\1\0\1\25\1\0\1\26\1\21\1\27\1\21\23\22"+
    "\1\30\1\22\3\0\1\26\1\31\1\0\1\32\1\21"+
    "\30\22\1\0\1\33\1\26\1\21\20\22\1\34\2\22"+
    "\1\35\4\22\1\36\1\37\1\22\1\33\1\21\2\22"+
    "\1\40\1\22\1\41\7\22\1\42\1\43\11\22\1\21"+
    "\1\22\1\44\4\22\1\45\14\22\1\21\1\46\7\22"+
    "\1\47\1\22\1\50\10\22\1\21\2\22\1\51\1\52"+
    "\1\53\1\54\1\55\1\22\1\56\1\57\1\60\2\22"+
    "\1\61\1\62\1\22\1\63\6\22\1\64\1\22\1\65"+
    "\1\66\1\22\1\67\1\70\1\71\1\72";

  private static int [] zzUnpackAction() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\64\0\64\0\150\0\234\0\64\0\64"+
    "\0\64\0\64\0\64\0\64\0\320\0\u0104\0\u0138\0\64"+
    "\0\64\0\64\0\64\0\64\0\u016c\0\u01a0\0\u01d4\0\u0208"+
    "\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8"+
    "\0\u03dc\0\u0410\0\u0444\0\u0478\0\u04ac\0\u04e0\0\u0514\0\64"+
    "\0\234\0\234\0\u0548\0\u057c\0\u05b0\0\u05e4\0\u0618\0\u01a0"+
    "\0\u064c\0\u0680\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u0784\0\u07b8"+
    "\0\u07ec\0\u0820\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958"+
    "\0\u098c\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8"+
    "\0\u0b2c\0\u05b0\0\u05b0\0\u0b60\0\u01a0\0\u0b94\0\u0bc8\0\u0bfc"+
    "\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0d9c"+
    "\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c"+
    "\0\u0f70\0\u0fa4\0\u0fd8\0\u100c\0\u1040\0\u1074\0\u10a8\0\u0548"+
    "\0\u0b60\0\u10dc\0\u1110\0\u1144\0\u1178\0\u11ac\0\u11e0\0\u1214"+
    "\0\u1248\0\u127c\0\u12b0\0\u12e4\0\u1318\0\u134c\0\u1380\0\u13b4"+
    "\0\u13e8\0\u141c\0\u023c\0\u1450\0\u1484\0\u023c\0\u14b8\0\u14ec"+
    "\0\u1520\0\u1554\0\u023c\0\u023c\0\u1588\0\u0ac4\0\u15bc\0\u15f0"+
    "\0\u1624\0\u023c\0\u1658\0\u023c\0\u168c\0\u16c0\0\u16f4\0\u1728"+
    "\0\u175c\0\u1790\0\u17c4\0\u023c\0\u023c\0\u17f8\0\u182c\0\u1860"+
    "\0\u1894\0\u18c8\0\u18fc\0\u1930\0\u1964\0\u1998\0\u19cc\0\u1a00"+
    "\0\u023c\0\u1a34\0\u1a68\0\u1a9c\0\u1ad0\0\u023c\0\u1b04\0\u1b38"+
    "\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c\0\u1c70\0\u1ca4\0\u1cd8"+
    "\0\u1d0c\0\u1d40\0\u1d74\0\u023c\0\u1da8\0\u1ddc\0\u1e10\0\u1e44"+
    "\0\u1e78\0\u1eac\0\u1ee0\0\u023c\0\u1f14\0\u023c\0\u1f48\0\u1f7c"+
    "\0\u1fb0\0\u1fe4\0\u2018\0\u204c\0\u2080\0\u20b4\0\u20e8\0\u211c"+
    "\0\u2150\0\u023c\0\u023c\0\u023c\0\u023c\0\u023c\0\u2184\0\u023c"+
    "\0\u023c\0\u023c\0\u21b8\0\u21ec\0\u023c\0\u023c\0\u2220\0\u01a0"+
    "\0\u2254\0\u2288\0\u22bc\0\u22f0\0\u2324\0\u2358\0\u023c\0\u238c"+
    "\0\u023c\0\u023c\0\u23c0\0\u023c\0\u023c\0\u023c\0\u023c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\7\1\12\1\13\1\14\1\2\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\3\26\1\27"+
    "\1\30\1\26\1\2\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\31\1\37\1\40\1\31\1\41\1\42\1\43"+
    "\1\31\1\44\1\45\1\46\2\31\1\47\1\31\111\0"+
    "\1\50\36\0\1\51\3\0\2\51\1\52\55\51\12\0"+
    "\1\53\4\0\1\54\62\0\1\55\1\0\2\56\60\0"+
    "\1\55\1\0\2\17\62\0\2\26\5\0\3\26\1\57"+
    "\31\26\20\0\2\26\5\0\35\26\20\0\2\26\5\0"+
    "\6\26\1\60\26\26\20\0\2\26\5\0\27\26\1\61"+
    "\5\26\20\0\2\31\5\0\35\31\20\0\2\31\5\0"+
    "\25\31\1\62\7\31\20\0\2\31\5\0\10\31\1\63"+
    "\11\31\1\64\2\31\1\65\7\31\20\0\2\31\5\0"+
    "\14\31\1\66\20\31\20\0\2\31\5\0\22\31\1\67"+
    "\1\31\1\70\3\31\1\71\3\31\1\72\20\0\2\31"+
    "\5\0\10\31\1\73\24\31\20\0\2\31\5\0\10\31"+
    "\1\74\24\31\20\0\2\31\5\0\24\31\1\75\10\31"+
    "\20\0\2\31\5\0\14\31\1\76\20\31\20\0\2\31"+
    "\5\0\14\31\1\77\3\31\1\100\14\31\20\0\2\31"+
    "\5\0\32\31\1\101\2\31\20\0\2\31\5\0\27\31"+
    "\1\102\2\31\1\103\2\31\20\0\2\31\5\0\14\31"+
    "\1\104\20\31\20\0\2\31\5\0\20\31\1\105\14\31"+
    "\20\0\2\31\5\0\14\31\1\106\20\31\1\53\1\107"+
    "\1\0\1\110\6\53\1\111\51\53\1\54\3\0\60\54"+
    "\20\0\1\112\1\113\60\0\1\114\1\0\2\56\62\0"+
    "\2\26\5\0\2\26\1\115\32\26\20\0\2\26\5\0"+
    "\20\26\1\116\14\26\20\0\2\31\5\0\22\31\1\117"+
    "\12\31\20\0\2\31\5\0\13\31\1\120\21\31\20\0"+
    "\2\31\5\0\10\31\1\121\24\31\20\0\2\31\5\0"+
    "\24\31\1\122\10\31\20\0\2\31\5\0\30\31\1\123"+
    "\2\31\1\124\1\31\20\0\2\31\5\0\20\31\1\125"+
    "\14\31\20\0\2\31\5\0\31\31\1\126\3\31\20\0"+
    "\2\31\5\0\12\31\1\127\22\31\20\0\2\31\5\0"+
    "\31\31\1\130\3\31\20\0\2\31\5\0\22\31\1\131"+
    "\12\31\20\0\2\31\5\0\12\31\1\132\22\31\20\0"+
    "\2\31\5\0\12\31\1\133\15\31\1\134\4\31\20\0"+
    "\2\31\5\0\14\31\1\135\20\31\20\0\2\31\5\0"+
    "\31\31\1\136\3\31\20\0\2\31\5\0\14\31\1\137"+
    "\20\31\20\0\2\31\5\0\22\31\1\140\12\31\20\0"+
    "\2\31\5\0\20\31\1\141\4\31\1\142\7\31\20\0"+
    "\2\31\5\0\11\31\1\143\23\31\20\0\2\31\5\0"+
    "\10\31\1\144\24\31\20\0\2\31\5\0\24\31\1\145"+
    "\10\31\20\0\2\31\5\0\27\31\1\146\5\31\1\107"+
    "\3\0\6\107\1\147\53\107\2\0\6\107\1\147\51\107"+
    "\1\53\1\107\1\0\1\110\6\53\1\111\4\53\1\150"+
    "\44\53\20\0\2\151\62\0\2\26\5\0\24\26\1\152"+
    "\10\26\20\0\2\31\5\0\14\31\1\153\20\31\20\0"+
    "\2\31\5\0\14\31\1\154\20\31\20\0\2\31\5\0"+
    "\30\31\1\155\4\31\20\0\2\31\5\0\30\31\1\156"+
    "\4\31\20\0\2\31\5\0\13\31\1\157\15\31\1\160"+
    "\3\31\20\0\2\31\5\0\25\31\1\161\7\31\20\0"+
    "\2\31\5\0\23\31\1\162\11\31\20\0\2\31\5\0"+
    "\14\31\1\163\10\31\1\164\7\31\20\0\2\31\5\0"+
    "\27\31\1\165\5\31\20\0\2\31\5\0\20\31\1\166"+
    "\14\31\20\0\2\31\5\0\30\31\1\167\4\31\20\0"+
    "\2\31\5\0\14\31\1\170\20\31\20\0\2\31\5\0"+
    "\22\31\1\171\12\31\20\0\2\31\5\0\31\31\1\172"+
    "\3\31\20\0\2\31\5\0\27\31\1\173\5\31\20\0"+
    "\2\31\5\0\25\31\1\174\7\31\20\0\2\31\5\0"+
    "\24\31\1\175\10\31\20\0\2\31\5\0\25\31\1\176"+
    "\7\31\20\0\2\31\5\0\33\31\1\177\1\31\20\0"+
    "\2\31\5\0\26\31\1\200\2\31\1\201\3\31\20\0"+
    "\2\31\5\0\22\31\1\202\12\31\20\0\2\31\5\0"+
    "\22\31\1\203\12\31\20\0\2\31\5\0\25\31\1\204"+
    "\7\31\20\0\2\31\5\0\13\31\1\205\21\31\1\107"+
    "\3\0\6\107\1\147\4\107\1\206\44\107\20\0\2\26"+
    "\5\0\12\26\1\207\22\26\20\0\2\31\5\0\10\31"+
    "\1\210\24\31\20\0\2\31\5\0\24\31\1\211\10\31"+
    "\20\0\2\31\5\0\14\31\1\212\20\31\20\0\2\31"+
    "\5\0\31\31\1\213\3\31\20\0\2\31\5\0\14\31"+
    "\1\214\20\31\20\0\2\31\5\0\27\31\1\215\5\31"+
    "\20\0\2\31\5\0\22\31\1\216\12\31\20\0\2\31"+
    "\5\0\20\31\1\217\14\31\20\0\2\31\5\0\27\31"+
    "\1\220\5\31\20\0\2\31\5\0\24\31\1\221\10\31"+
    "\20\0\2\31\5\0\20\31\1\222\14\31\20\0\2\31"+
    "\5\0\14\31\1\223\20\31\20\0\2\31\5\0\25\31"+
    "\1\224\7\31\20\0\2\31\5\0\27\31\1\225\5\31"+
    "\20\0\2\31\5\0\32\31\1\226\2\31\20\0\2\31"+
    "\5\0\10\31\1\227\24\31\20\0\2\31\5\0\13\31"+
    "\1\230\21\31\20\0\2\31\5\0\31\31\1\231\3\31"+
    "\20\0\2\31\5\0\10\31\1\232\24\31\20\0\2\31"+
    "\5\0\20\31\1\233\14\31\20\0\2\31\5\0\14\31"+
    "\1\234\20\31\20\0\2\31\5\0\20\31\1\235\14\31"+
    "\20\0\2\31\5\0\10\31\1\236\24\31\20\0\2\26"+
    "\5\0\20\26\1\237\14\26\20\0\2\31\5\0\24\31"+
    "\1\240\10\31\20\0\2\31\5\0\10\31\1\241\24\31"+
    "\20\0\2\31\5\0\27\31\1\242\5\31\20\0\2\31"+
    "\5\0\32\31\1\243\2\31\20\0\2\31\5\0\33\31"+
    "\1\244\1\31\20\0\2\31\5\0\24\31\1\245\10\31"+
    "\20\0\2\31\5\0\25\31\1\246\7\31\20\0\2\31"+
    "\5\0\12\31\1\247\22\31\20\0\2\31\5\0\11\31"+
    "\1\250\23\31\20\0\2\31\5\0\24\31\1\251\10\31"+
    "\20\0\2\31\5\0\20\31\1\252\14\31\20\0\2\31"+
    "\5\0\24\31\1\253\10\31\20\0\2\31\5\0\25\31"+
    "\1\254\7\31\20\0\2\31\5\0\27\31\1\255\5\31"+
    "\20\0\2\31\5\0\13\31\1\256\21\31\20\0\2\31"+
    "\5\0\14\31\1\257\20\31\20\0\2\31\5\0\16\31"+
    "\1\260\16\31\20\0\2\31\5\0\12\31\1\261\22\31"+
    "\20\0\2\31\5\0\13\31\1\262\21\31\20\0\2\26"+
    "\5\0\26\26\1\263\6\26\20\0\2\31\5\0\25\31"+
    "\1\264\7\31\20\0\2\31\5\0\32\31\1\265\2\31"+
    "\20\0\2\31\5\0\12\31\1\266\22\31\20\0\2\31"+
    "\5\0\14\31\1\267\20\31\20\0\2\31\5\0\10\31"+
    "\1\270\24\31\20\0\2\31\5\0\14\31\1\271\20\31"+
    "\20\0\2\31\5\0\20\31\1\272\14\31\20\0\2\31"+
    "\5\0\13\31\1\273\21\31\20\0\2\31\5\0\27\31"+
    "\1\274\5\31\20\0\2\31\5\0\12\31\1\275\22\31"+
    "\20\0\2\31\5\0\30\31\1\276\4\31\20\0\2\31"+
    "\5\0\10\31\1\277\24\31\20\0\2\31\5\0\10\31"+
    "\1\300\14\31\1\301\7\31\20\0\2\31\5\0\13\31"+
    "\1\302\21\31\20\0\2\31\5\0\20\31\1\303\14\31"+
    "\20\0\2\31\5\0\10\31\1\304\14\31\1\305\7\31"+
    "\20\0\2\31\5\0\14\31\1\306\20\31\20\0\2\26"+
    "\5\0\10\26\1\307\24\26\20\0\2\31\5\0\12\31"+
    "\1\310\22\31\20\0\2\31\5\0\31\31\1\311\3\31"+
    "\20\0\2\31\5\0\27\31\1\312\5\31\20\0\2\31"+
    "\5\0\27\31\1\313\5\31\20\0\2\31\5\0\30\31"+
    "\1\314\4\31\20\0\2\31\5\0\27\31\1\315\5\31"+
    "\20\0\2\31\5\0\14\31\1\316\20\31\20\0\2\31"+
    "\5\0\20\31\1\317\14\31\20\0\2\31\5\0\30\31"+
    "\1\320\4\31\20\0\2\31\5\0\30\31\1\321\4\31"+
    "\20\0\2\31\5\0\30\31\1\322\4\31\20\0\2\31"+
    "\5\0\10\31\1\323\24\31\20\0\2\31\5\0\13\31"+
    "\1\324\21\31\20\0\2\31\5\0\30\31\1\325\4\31"+
    "\20\0\2\31\5\0\30\31\1\326\4\31\20\0\2\31"+
    "\5\0\27\31\1\327\5\31\20\0\2\26\5\0\22\26"+
    "\1\330\12\26\20\0\2\31\5\0\31\31\1\331\3\31"+
    "\20\0\2\31\5\0\25\31\1\332\7\31\20\0\2\31"+
    "\5\0\10\31\1\333\24\31\20\0\2\31\5\0\13\31"+
    "\1\334\21\31\20\0\2\31\5\0\10\31\1\335\14\31"+
    "\1\336\7\31\20\0\2\31\5\0\25\31\1\337\7\31"+
    "\20\0\2\31\5\0\25\31\1\340\7\31\20\0\2\31"+
    "\5\0\27\31\1\341\5\31\20\0\2\31\5\0\27\31"+
    "\1\342\5\31\20\0\2\31\5\0\14\31\1\343\20\31"+
    "\20\0\2\31\5\0\30\31\1\344\4\31\20\0\2\31"+
    "\5\0\30\31\1\345\4\31\20\0\2\31\5\0\27\31"+
    "\1\346\5\31\20\0\2\31\5\0\30\31\1\347\4\31";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9204];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\11\2\1\6\11\3\1\5\11\23\1\1\11"+
    "\1\0\1\1\1\0\1\1\1\0\31\1\3\0\2\1"+
    "\1\0\32\1\1\0\200\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    void LexLuthorErr(String Token, String Valor)
    {
        try {
            char enter=13;
            String regreso=Token+"  "+Valor;
            RandomAccessFile errores= new RandomAccessFile("LEXEMAS.txt","rw");
            errores.seek(errores.length());
            errores.writeBytes(regreso);
            errores.writeChar(enter);
            errores.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Lexico.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Lexico.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void LexLuthor(String Token, String Valor)
    {
        try {
            char enter=13;
            String regreso=Token+"  "+Valor;
            RandomAccessFile traductor= new RandomAccessFile("LEXEMAS.txt","rw");
            traductor.seek(traductor.length());
            traductor.writeBytes(regreso);
            traductor.writeChar(enter);
            traductor.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Lexico.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Lexico.class.getName()).log(Level.SEVERE, null, ex);
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexico(java.io.Reader in) {
         try {
            RandomAccessFile traductor= new RandomAccessFile("LEXEMAS.txt","rw");
            traductor.setLength(0);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Lexico.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Lexico.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            RandomAccessFile errores= new RandomAccessFile("ERRORES.txt","rw");
            errores.setLength(0);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Lexico.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Lexico.class.getName()).log(Level.SEVERE, null, ex);
        }

    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("error: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthorErr("Error ---- ",yytext());
            }
            // fall through
          case 59: break;
          case 2:
            { System.out.print(yytext());
            }
            // fall through
          case 60: break;
          case 3:
            { System.out.println("encontre un espacio en blanco: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Signo ---- Espacio ----- ",yytext());
            }
            // fall through
          case 61: break;
          case 4:
            { System.out.println("encontre un signo: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Signo ---- Comillas ----- ",yytext());
            }
            // fall through
          case 62: break;
          case 5:
            { System.out.println("encontre un operador: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Operador ---- OPERADOR ----- ",yytext());
            }
            // fall through
          case 63: break;
          case 6:
            { System.out.println("encontre un signo: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Signo ---- Parentesis Izquierdo ----- ",yytext());
            }
            // fall through
          case 64: break;
          case 7:
            { System.out.println("encontre un signo: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Signo ---- Parentesis Derecho ----- ",yytext());
            }
            // fall through
          case 65: break;
          case 8:
            { System.out.println("encontre un operador: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Operador ---- Mas ----- ",yytext());
            }
            // fall through
          case 66: break;
          case 9:
            { System.out.println("encontre un signo: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Signo ---- Coma ----- ",yytext());
            }
            // fall through
          case 67: break;
          case 10:
            { System.out.println("encontre un operador: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Operador ---- Menos ----- ",yytext());
            }
            // fall through
          case 68: break;
          case 11:
            { System.out.println("encontre un numero: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Numero Entero ----- ",yytext());
            }
            // fall through
          case 69: break;
          case 12:
            { System.out.println("encontre un signo: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Signo ---- Dos Puntos ----- ",yytext());
            }
            // fall through
          case 70: break;
          case 13:
            { System.out.println("encontre un signo: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Signo ---- Punto Coma ----- ",yytext());
            }
            // fall through
          case 71: break;
          case 14:
            { System.out.println("encontre un operador: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Operador ---- Menor ----- ",yytext());
            }
            // fall through
          case 72: break;
          case 15:
            { System.out.println("encontre un operador: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Operador ---- Igual ----- ",yytext());
            }
            // fall through
          case 73: break;
          case 16:
            { System.out.println("encontre un operador: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Operador ---- Mayor ----- ",yytext());
            }
            // fall through
          case 74: break;
          case 17:
            { System.out.println("encontre una var de Metodo: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Varibale de Metodo ----- ",yytext());
            }
            // fall through
          case 75: break;
          case 18:
            { System.out.println("encontre una variable: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Varibale ----- ",yytext());
            }
            // fall through
          case 76: break;
          case 19:
            { System.out.println("encontre un operador: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Operador ---- NO Igual ----- ",yytext());
            }
            // fall through
          case 77: break;
          case 20:
            { System.out.println("encontre una cadena: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Cadena ----- ",yytext());
            }
            // fall through
          case 78: break;
          case 21:
            { System.out.println("encontre un comentario A: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Comentario tipo A ----- ",yytext());
            }
            // fall through
          case 79: break;
          case 22:
            { System.out.println("encontre una Numero Malo: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthorErr("Numero malo ----- ",yytext());
            }
            // fall through
          case 80: break;
          case 23:
            { System.out.println("encontre una palabra reservada ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Palabra Reservada ---- OR ----- ",yytext());
            }
            // fall through
          case 81: break;
          case 24:
            { System.out.println("encontre una palabra reservada ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Palabra Reservada ---- Si ----- ",yytext());
            }
            // fall through
          case 82: break;
          case 25:
            { System.out.println("encontre una real: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Numero Real ----- ",yytext());
            }
            // fall through
          case 83: break;
          case 26:
            { System.out.println("encontre una palabra reservada ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Palabra Reservada ---- AND ----- ",yytext());
            }
            // fall through
          case 84: break;
          case 27:
            { System.out.println("encontre un comentario B: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Comentario tipo B ----- ",yytext());
            }
            // fall through
          case 85: break;
          case 28:
            { System.out.println("encontre una palabra reservada ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Palabra Reservada ---- Leer ----- ",yytext());
            }
            // fall through
          case 86: break;
          case 29:
            { System.out.println("encontre una palabra reservada: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Palabra Reservada ---- Nulo ----- ",yytext());
            }
            // fall through
          case 87: break;
          case 30:
            { System.out.println("encontre una palabra reservada: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Palabra Reservada ---- Real ----- ",yytext());
            }
            // fall through
          case 88: break;
          case 31:
            { System.out.println("encontre una palabra reservada ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Palabra Reservada ---- Sino ----- ",yytext());
            }
            // fall through
          case 89: break;
          case 32:
            { System.out.println("encontre una palabra reservada: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Palabra Reservada ---- Clase ----- ",yytext());
            }
            // fall through
          case 90: break;
          case 33:
            { System.out.println("encontre una palabra reservada ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Palabra Reservada ---- Desde ----- ",yytext());
            }
            // fall through
          case 91: break;
          case 34:
            { System.out.println("encontre un falso ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Palabra Reservada ---- Falso ----- ",yytext());
            }
            // fall through
          case 92: break;
          case 35:
            { System.out.println("encontre una palabra reservada ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Palabra Reservada ---- Hacer ----- ",yytext());
            }
            // fall through
          case 93: break;
          case 36:
            { System.out.println("encontre una palabra reservada: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Palabra Reservada ---- Cadena ----- ",yytext());
            }
            // fall through
          case 94: break;
          case 37:
            { System.out.println("encontre una palabra reservada: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Palabra Reservada ---- Entero ----- ",yytext());
            }
            // fall through
          case 95: break;
          case 38:
            { System.out.println("encontre una palabra reservada: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Palabra Reservada ---- Booleano ----- ",yytext());
            }
            // fall through
          case 96: break;
          case 39:
            { System.out.println("encontre una palabra reservada: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Palabra Reservada ---- Incluir ----- ",yytext());
            }
            // fall through
          case 97: break;
          case 40:
            { System.out.println("encontre una palabra reservada: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Palabra Reservada ---- Metodos ----- ",yytext());
            }
            // fall through
          case 98: break;
          case 41:
            { System.out.println("encontre una palabra reservada ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Palabra Reservada ---- Devolver ----- ",yytext());
            }
            // fall through
          case 99: break;
          case 42:
            { System.out.println("encontre una palabra reservada ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Palabra Reservada ---- Eliminar ----- ",yytext());
            }
            // fall through
          case 100: break;
          case 43:
            { System.out.println("encontre una palabra reservada ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Palabra Reservada ---- Entonces ----- ",yytext());
            }
            // fall through
          case 101: break;
          case 44:
            { System.out.println("encontre una palabra reservada ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Palabra Reservada ---- Escribir ----- ",yytext());
            }
            // fall through
          case 102: break;
          case 45:
            { System.out.println("encontre una palabra reservada: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Palabra Reservada ---- Extiende ----- ",yytext());
            }
            // fall through
          case 103: break;
          case 46:
            { System.out.println("encontre una palabra reservada ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Palabra Reservada ---- Mientras ----- ",yytext());
            }
            // fall through
          case 104: break;
          case 47:
            { System.out.println("encontre una palabra reservada: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Palabra Reservada ---- Privadas ----- ",yytext());
            }
            // fall through
          case 105: break;
          case 48:
            { System.out.println("encontre una palabra reservada: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Palabra Reservada ---- Privados ----- ",yytext());
            }
            // fall through
          case 106: break;
          case 49:
            { System.out.println("encontre una palabra reservada: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Palabra Reservada ---- Publicas ----- ",yytext());
            }
            // fall through
          case 107: break;
          case 50:
            { System.out.println("encontre una palabra reservada: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Palabra Reservada ---- Publicos ----- ",yytext());
            }
            // fall through
          case 108: break;
          case 51:
            { System.out.println("encontre una palabra reservada ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Palabra Reservada ---- Principal ----- ",yytext());
            }
            // fall through
          case 109: break;
          case 52:
            { System.out.println("encontre un verdadero ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Palabra Reservada ---- Verdadero ----- ",yytext());
            }
            // fall through
          case 110: break;
          case 53:
            { System.out.println("encontre una palabra reservada ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Palabra Reservada ---- Destructor ----- ",yytext());
            }
            // fall through
          case 111: break;
          case 54:
            { System.out.println("encontre una palabra reservada ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Palabra Reservada ---- Instanciar ----- ",yytext());
            }
            // fall through
          case 112: break;
          case 55:
            { System.out.println("encontre una palabra reservada: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Palabra Reservada ---- Protegidas ----- ",yytext());
            }
            // fall through
          case 113: break;
          case 56:
            { System.out.println("encontre una palabra reservada: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Protegidos ----- ",yytext());
            }
            // fall through
          case 114: break;
          case 57:
            { System.out.println("encontre una palabra reservada ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Palabra Reservada ---- Contructor ----- ",yytext());
            }
            // fall through
          case 115: break;
          case 58:
            { System.out.println("encontre una palabra reservada: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("Palabra Reservada ---- Propiedades ----- ",yytext());
            }
            // fall through
          case 116: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexico [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexico scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexico(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
