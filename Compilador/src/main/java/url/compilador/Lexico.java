// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/url/compilador/jflex/Reglas.flex

/* Seccion 1*/
package url.compilador;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.Symbol;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\1\6"+
    "\1\7\2\0\1\10\2\0\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\11\22\1\23\1\24"+
    "\1\25\1\26\1\27\2\0\1\30\1\31\1\32\1\33"+
    "\1\34\10\32\1\35\1\36\1\37\1\32\1\40\10\32"+
    "\3\0\1\10\1\41\1\0\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\2\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\53\1\61\1\62\1\63\1\64"+
    "\1\65\1\53\1\66\1\53\1\67\1\70\1\0\1\71"+
    "\7\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\6\2\14\1\15"+
    "\1\16\1\17\1\20\1\21\4\22\20\23\1\24\1\25"+
    "\1\26\1\0\1\27\1\0\1\30\1\0\1\31\1\22"+
    "\1\32\1\22\26\23\1\33\2\23\3\0\1\31\1\34"+
    "\1\0\1\35\1\22\35\23\1\0\1\36\1\31\1\22"+
    "\21\23\1\37\3\23\1\40\4\23\1\41\1\42\1\43"+
    "\1\44\2\23\1\36\1\22\2\23\1\45\2\23\1\46"+
    "\7\23\1\47\1\50\13\23\1\22\1\23\1\51\1\23"+
    "\1\52\3\23\1\53\16\23\1\22\1\54\10\23\1\55"+
    "\2\23\1\56\11\23\1\22\5\23\1\57\1\60\1\61"+
    "\1\62\1\63\2\23\1\64\1\65\1\66\2\23\1\67"+
    "\1\70\1\71\1\23\1\72\6\23\1\73\3\23\1\74"+
    "\4\23\1\75\1\76\1\23\1\77\1\100\2\23\1\101"+
    "\1\102\1\103\3\23\1\104\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\72\0\72\0\72\0\164\0\256\0\72"+
    "\0\72\0\72\0\72\0\72\0\72\0\350\0\u0122\0\u015c"+
    "\0\72\0\72\0\72\0\72\0\72\0\u0196\0\u01d0\0\u020a"+
    "\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366\0\u03a0\0\u03da"+
    "\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536\0\u0570\0\u05aa"+
    "\0\u05e4\0\72\0\72\0\72\0\256\0\256\0\u061e\0\u0658"+
    "\0\u0692\0\u06cc\0\u0706\0\u01d0\0\u0740\0\u077a\0\u07b4\0\u07ee"+
    "\0\u0828\0\u0862\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be"+
    "\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e"+
    "\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e"+
    "\0\u0d98\0\u0692\0\u0692\0\u0dd2\0\u01d0\0\u0e0c\0\u0e46\0\u0e80"+
    "\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050"+
    "\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220"+
    "\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0"+
    "\0\u142a\0\u1464\0\u149e\0\u14d8\0\u061e\0\u0dd2\0\u1512\0\u154c"+
    "\0\u1586\0\u15c0\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c"+
    "\0\u1756\0\u1790\0\u17ca\0\u1804\0\u183e\0\u1878\0\u18b2\0\u18ec"+
    "\0\u027e\0\u1926\0\u1960\0\u199a\0\u027e\0\u19d4\0\u1a0e\0\u1a48"+
    "\0\u1a82\0\u027e\0\u027e\0\u027e\0\u027e\0\u1abc\0\u1af6\0\u0d24"+
    "\0\u1b30\0\u1b6a\0\u1ba4\0\u027e\0\u1bde\0\u1c18\0\u027e\0\u1c52"+
    "\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74\0\u1dae\0\u027e\0\u027e"+
    "\0\u1de8\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e"+
    "\0\u1fb8\0\u1ff2\0\u202c\0\u2066\0\u20a0\0\u20da\0\u2114\0\u027e"+
    "\0\u214e\0\u2188\0\u21c2\0\u027e\0\u21fc\0\u2236\0\u2270\0\u22aa"+
    "\0\u22e4\0\u231e\0\u2358\0\u2392\0\u23cc\0\u2406\0\u2440\0\u247a"+
    "\0\u24b4\0\u24ee\0\u2528\0\u027e\0\u2562\0\u259c\0\u25d6\0\u2610"+
    "\0\u264a\0\u2684\0\u26be\0\u26f8\0\u027e\0\u2732\0\u276c\0\u027e"+
    "\0\u27a6\0\u27e0\0\u281a\0\u2854\0\u288e\0\u28c8\0\u2902\0\u293c"+
    "\0\u2976\0\u29b0\0\u29ea\0\u2a24\0\u2a5e\0\u2a98\0\u2ad2\0\u027e"+
    "\0\u027e\0\u027e\0\u027e\0\u027e\0\u2b0c\0\u2b46\0\u027e\0\u027e"+
    "\0\u027e\0\u2b80\0\u2bba\0\u027e\0\u027e\0\u027e\0\u2bf4\0\u01d0"+
    "\0\u2c2e\0\u2c68\0\u2ca2\0\u2cdc\0\u2d16\0\u2d50\0\u027e\0\u2d8a"+
    "\0\u2dc4\0\u2dfe\0\u027e\0\u2e38\0\u2e72\0\u2eac\0\u2ee6\0\u027e"+
    "\0\u027e\0\u2f20\0\u027e\0\u027e\0\u2f5a\0\u2f94\0\u027e\0\u027e"+
    "\0\u027e\0\u2fce\0\u3008\0\u3042\0\u027e\0\u027e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\3\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\10\1\13\1\14\1\15\1\2\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\5\27"+
    "\1\30\1\31\1\27\1\2\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\32\1\40\1\41\1\32\1\42\1\43"+
    "\1\44\1\32\1\45\1\46\1\47\1\50\1\32\1\51"+
    "\2\32\1\52\1\53\120\0\1\54\43\0\2\55\3\0"+
    "\2\55\1\56\62\55\13\0\1\57\4\0\1\60\70\0"+
    "\1\61\1\0\2\62\66\0\1\61\1\0\2\20\70\0"+
    "\2\27\5\0\5\27\1\63\32\27\23\0\2\27\5\0"+
    "\40\27\23\0\2\27\5\0\10\27\1\64\27\27\23\0"+
    "\2\27\5\0\31\27\1\65\6\27\23\0\2\32\5\0"+
    "\40\32\23\0\2\32\5\0\27\32\1\66\10\32\23\0"+
    "\2\32\5\0\12\32\1\67\11\32\1\70\2\32\1\71"+
    "\10\32\23\0\2\32\5\0\16\32\1\72\21\32\23\0"+
    "\2\32\5\0\24\32\1\73\1\32\1\74\3\32\1\75"+
    "\3\32\1\76\1\32\23\0\2\32\5\0\12\32\1\77"+
    "\25\32\23\0\2\32\5\0\12\32\1\100\25\32\23\0"+
    "\2\32\5\0\26\32\1\101\11\32\23\0\2\32\5\0"+
    "\16\32\1\102\10\32\1\103\10\32\23\0\2\32\5\0"+
    "\16\32\1\104\3\32\1\105\15\32\23\0\2\32\5\0"+
    "\34\32\1\106\3\32\23\0\2\32\5\0\31\32\1\107"+
    "\2\32\1\110\3\32\23\0\2\32\5\0\12\32\1\111"+
    "\3\32\1\112\21\32\23\0\2\32\5\0\16\32\1\113"+
    "\3\32\1\114\15\32\23\0\2\32\5\0\12\32\1\115"+
    "\25\32\23\0\2\32\5\0\16\32\1\116\21\32\2\0"+
    "\2\57\1\117\1\0\1\120\6\57\1\121\56\57\2\60"+
    "\3\0\65\60\21\0\1\122\1\123\66\0\1\124\1\0"+
    "\2\62\70\0\2\27\5\0\3\27\1\125\34\27\23\0"+
    "\2\27\5\0\22\27\1\126\15\27\23\0\2\32\5\0"+
    "\24\32\1\127\13\32\23\0\2\32\5\0\15\32\1\130"+
    "\22\32\23\0\2\32\5\0\12\32\1\131\25\32\23\0"+
    "\2\32\5\0\26\32\1\132\3\32\1\133\5\32\23\0"+
    "\2\32\5\0\32\32\1\134\2\32\1\135\2\32\23\0"+
    "\2\32\5\0\22\32\1\136\15\32\23\0\2\32\5\0"+
    "\33\32\1\137\4\32\23\0\2\32\5\0\14\32\1\140"+
    "\23\32\23\0\2\32\5\0\33\32\1\141\4\32\23\0"+
    "\2\32\5\0\24\32\1\142\13\32\23\0\2\32\5\0"+
    "\14\32\1\143\23\32\23\0\2\32\5\0\14\32\1\144"+
    "\15\32\1\145\5\32\23\0\2\32\5\0\16\32\1\146"+
    "\21\32\23\0\2\32\5\0\20\32\1\147\17\32\23\0"+
    "\2\32\5\0\33\32\1\150\4\32\23\0\2\32\5\0"+
    "\16\32\1\151\21\32\23\0\2\32\5\0\24\32\1\152"+
    "\13\32\23\0\2\32\5\0\22\32\1\153\4\32\1\154"+
    "\10\32\23\0\2\32\5\0\13\32\1\155\24\32\23\0"+
    "\2\32\5\0\22\32\1\156\15\32\23\0\2\32\5\0"+
    "\12\32\1\157\25\32\23\0\2\32\5\0\26\32\1\160"+
    "\11\32\23\0\2\32\5\0\26\32\1\161\11\32\23\0"+
    "\2\32\5\0\26\32\1\162\11\32\23\0\2\32\5\0"+
    "\31\32\1\163\6\32\2\0\2\117\3\0\6\117\1\164"+
    "\61\117\2\0\6\117\1\164\56\117\2\57\1\117\1\0"+
    "\1\120\6\57\1\121\4\57\1\165\51\57\21\0\2\166"+
    "\70\0\2\27\5\0\26\27\1\167\11\27\23\0\2\32"+
    "\5\0\16\32\1\170\21\32\23\0\2\32\5\0\16\32"+
    "\1\171\21\32\23\0\2\32\5\0\32\32\1\172\5\32"+
    "\23\0\2\32\5\0\32\32\1\173\5\32\23\0\2\32"+
    "\5\0\16\32\1\174\21\32\23\0\2\32\5\0\15\32"+
    "\1\175\15\32\1\176\4\32\23\0\2\32\5\0\27\32"+
    "\1\177\10\32\23\0\2\32\5\0\25\32\1\200\12\32"+
    "\23\0\2\32\5\0\16\32\1\201\10\32\1\202\10\32"+
    "\23\0\2\32\5\0\31\32\1\203\6\32\23\0\2\32"+
    "\5\0\22\32\1\204\15\32\23\0\2\32\5\0\32\32"+
    "\1\205\5\32\23\0\2\32\5\0\16\32\1\206\21\32"+
    "\23\0\2\32\5\0\24\32\1\207\13\32\23\0\2\32"+
    "\5\0\33\32\1\210\4\32\23\0\2\32\5\0\31\32"+
    "\1\211\6\32\23\0\2\32\5\0\12\32\1\212\25\32"+
    "\23\0\2\32\5\0\27\32\1\213\10\32\23\0\2\32"+
    "\5\0\26\32\1\214\11\32\23\0\2\32\5\0\27\32"+
    "\1\215\10\32\23\0\2\32\5\0\35\32\1\216\2\32"+
    "\23\0\2\32\5\0\30\32\1\217\2\32\1\220\4\32"+
    "\23\0\2\32\5\0\24\32\1\221\13\32\23\0\2\32"+
    "\5\0\37\32\1\222\23\0\2\32\5\0\24\32\1\223"+
    "\13\32\23\0\2\32\5\0\27\32\1\224\10\32\23\0"+
    "\2\32\5\0\27\32\1\225\10\32\23\0\2\32\5\0"+
    "\20\32\1\226\17\32\23\0\2\32\5\0\15\32\1\227"+
    "\22\32\2\0\2\117\3\0\6\117\1\164\4\117\1\230"+
    "\51\117\21\0\2\27\5\0\14\27\1\231\23\27\23\0"+
    "\2\32\5\0\12\32\1\232\25\32\23\0\2\32\5\0"+
    "\26\32\1\233\11\32\23\0\2\32\5\0\16\32\1\234"+
    "\21\32\23\0\2\32\5\0\33\32\1\235\4\32\23\0"+
    "\2\32\5\0\26\32\1\236\11\32\23\0\2\32\5\0"+
    "\16\32\1\237\21\32\23\0\2\32\5\0\31\32\1\240"+
    "\6\32\23\0\2\32\5\0\24\32\1\241\13\32\23\0"+
    "\2\32\5\0\22\32\1\242\15\32\23\0\2\32\5\0"+
    "\31\32\1\243\6\32\23\0\2\32\5\0\26\32\1\244"+
    "\11\32\23\0\2\32\5\0\22\32\1\245\15\32\23\0"+
    "\2\32\5\0\16\32\1\246\21\32\23\0\2\32\5\0"+
    "\27\32\1\247\10\32\23\0\2\32\5\0\31\32\1\250"+
    "\6\32\23\0\2\32\5\0\34\32\1\251\3\32\23\0"+
    "\2\32\5\0\12\32\1\252\25\32\23\0\2\32\5\0"+
    "\31\32\1\253\6\32\23\0\2\32\5\0\15\32\1\254"+
    "\22\32\23\0\2\32\5\0\33\32\1\255\4\32\23\0"+
    "\2\32\5\0\12\32\1\256\25\32\23\0\2\32\5\0"+
    "\22\32\1\257\15\32\23\0\2\32\5\0\16\32\1\260"+
    "\21\32\23\0\2\32\5\0\22\32\1\261\15\32\23\0"+
    "\2\32\5\0\16\32\1\262\21\32\23\0\2\32\5\0"+
    "\12\32\1\263\25\32\23\0\2\27\5\0\22\27\1\264"+
    "\15\27\23\0\2\32\5\0\26\32\1\265\11\32\23\0"+
    "\2\32\5\0\12\32\1\266\25\32\23\0\2\32\5\0"+
    "\31\32\1\267\6\32\23\0\2\32\5\0\27\32\1\270"+
    "\10\32\23\0\2\32\5\0\34\32\1\271\3\32\23\0"+
    "\2\32\5\0\35\32\1\272\2\32\23\0\2\32\5\0"+
    "\26\32\1\273\11\32\23\0\2\32\5\0\27\32\1\274"+
    "\10\32\23\0\2\32\5\0\14\32\1\275\23\32\23\0"+
    "\2\32\5\0\13\32\1\276\24\32\23\0\2\32\5\0"+
    "\26\32\1\277\11\32\23\0\2\32\5\0\22\32\1\300"+
    "\15\32\23\0\2\32\5\0\26\32\1\301\11\32\23\0"+
    "\2\32\5\0\22\32\1\302\15\32\23\0\2\32\5\0"+
    "\27\32\1\303\10\32\23\0\2\32\5\0\31\32\1\304"+
    "\6\32\23\0\2\32\5\0\15\32\1\305\22\32\23\0"+
    "\2\32\5\0\16\32\1\306\21\32\23\0\2\32\5\0"+
    "\20\32\1\307\17\32\23\0\2\32\5\0\14\32\1\310"+
    "\23\32\23\0\2\32\5\0\26\32\1\311\11\32\23\0"+
    "\2\32\5\0\15\32\1\312\22\32\23\0\2\27\5\0"+
    "\30\27\1\313\7\27\23\0\2\32\5\0\27\32\1\314"+
    "\10\32\23\0\2\32\5\0\1\315\37\32\23\0\2\32"+
    "\5\0\34\32\1\316\3\32\23\0\2\32\5\0\14\32"+
    "\1\317\23\32\23\0\2\32\5\0\16\32\1\320\21\32"+
    "\23\0\2\32\5\0\12\32\1\321\25\32\23\0\2\32"+
    "\5\0\16\32\1\322\21\32\23\0\2\32\5\0\22\32"+
    "\1\323\15\32\23\0\2\32\5\0\15\32\1\324\22\32"+
    "\23\0\2\32\5\0\31\32\1\325\6\32\23\0\2\32"+
    "\5\0\14\32\1\326\23\32\23\0\2\32\5\0\33\32"+
    "\1\327\4\32\23\0\2\32\5\0\32\32\1\330\5\32"+
    "\23\0\2\32\5\0\12\32\1\331\25\32\23\0\2\32"+
    "\5\0\12\32\1\332\14\32\1\333\10\32\23\0\2\32"+
    "\5\0\15\32\1\334\22\32\23\0\2\32\5\0\22\32"+
    "\1\335\15\32\23\0\2\32\5\0\12\32\1\336\14\32"+
    "\1\337\10\32\23\0\2\32\5\0\33\32\1\340\4\32"+
    "\23\0\2\32\5\0\16\32\1\341\21\32\23\0\2\27"+
    "\5\0\12\27\1\342\25\27\23\0\2\32\5\0\1\32"+
    "\1\343\2\32\1\344\3\32\1\345\27\32\23\0\2\32"+
    "\5\0\14\32\1\346\23\32\23\0\2\32\5\0\33\32"+
    "\1\347\4\32\23\0\2\32\5\0\31\32\1\350\6\32"+
    "\23\0\2\32\5\0\31\32\1\351\6\32\23\0\2\32"+
    "\5\0\32\32\1\352\5\32\23\0\2\32\5\0\31\32"+
    "\1\353\6\32\23\0\2\32\5\0\16\32\1\354\21\32"+
    "\23\0\2\32\5\0\22\32\1\355\15\32\23\0\2\32"+
    "\5\0\25\32\1\356\12\32\23\0\2\32\5\0\32\32"+
    "\1\357\5\32\23\0\2\32\5\0\32\32\1\360\5\32"+
    "\23\0\2\32\5\0\32\32\1\361\5\32\23\0\2\32"+
    "\5\0\12\32\1\362\25\32\23\0\2\32\5\0\15\32"+
    "\1\363\22\32\23\0\2\32\5\0\32\32\1\364\5\32"+
    "\23\0\2\32\5\0\32\32\1\365\5\32\23\0\2\32"+
    "\5\0\16\32\1\366\21\32\23\0\2\32\5\0\31\32"+
    "\1\367\6\32\23\0\2\27\5\0\24\27\1\370\13\27"+
    "\23\0\2\32\5\0\27\32\1\371\10\32\23\0\2\32"+
    "\5\0\26\32\1\372\11\32\23\0\2\32\5\0\16\32"+
    "\1\373\21\32\23\0\2\32\5\0\33\32\1\374\4\32"+
    "\23\0\2\32\5\0\27\32\1\375\10\32\23\0\2\32"+
    "\5\0\12\32\1\376\25\32\23\0\2\32\5\0\27\32"+
    "\1\377\10\32\23\0\2\32\5\0\15\32\1\u0100\22\32"+
    "\23\0\2\32\5\0\12\32\1\u0101\14\32\1\u0102\10\32"+
    "\23\0\2\32\5\0\27\32\1\u0103\10\32\23\0\2\32"+
    "\5\0\24\32\1\u0104\13\32\23\0\2\32\5\0\33\32"+
    "\1\u0105\4\32\23\0\2\32\5\0\12\32\1\u0106\25\32"+
    "\23\0\2\32\5\0\27\32\1\u0107\10\32\23\0\2\32"+
    "\5\0\31\32\1\u0108\6\32\23\0\2\32\5\0\31\32"+
    "\1\u0109\6\32\23\0\2\32\5\0\16\32\1\u010a\21\32"+
    "\23\0\2\32\5\0\32\32\1\u010b\5\32\23\0\2\32"+
    "\5\0\32\32\1\u010c\5\32\23\0\2\32\5\0\16\32"+
    "\1\u010d\21\32\23\0\2\32\5\0\16\32\1\u010e\21\32"+
    "\23\0\2\32\5\0\24\32\1\u010f\13\32\23\0\2\32"+
    "\5\0\31\32\1\u0110\6\32\23\0\2\32\5\0\32\32"+
    "\1\u0111\5\32\23\0\2\32\5\0\12\32\1\u0112\25\32"+
    "\23\0\2\32\5\0\31\32\1\u0113\6\32\23\0\2\32"+
    "\5\0\26\32\1\u0114\11\32\23\0\2\32\5\0\27\32"+
    "\1\u0115\10\32\23\0\2\32\5\0\27\32\1\u0116\10\32"+
    "\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12412];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\4\11\2\1\6\11\3\1\5\11\24\1\3\11"+
    "\1\0\1\1\1\0\1\1\1\0\35\1\3\0\2\1"+
    "\1\0\37\1\1\0\242\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */

    /* Funcion para pasar los errores al archivo ERRORES.txt*/
    void LexLuthorErr(String Token, String Valor)
    {
        try {
            char enter=13;
            String regreso=Token+"  "+Valor;
            RandomAccessFile errores= new RandomAccessFile("ERRORES.txt","rw");
            errores.seek(errores.length());
            errores.writeBytes(regreso);
            errores.writeChar(enter);
            errores.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Lexico.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Lexico.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /* Funcion para pasar los tokens al archivo LEXEMAS.txt*/
    void LexLuthor(String Token, String Valor)
    {
        try {
            char enter=13;
            String regreso=Token+"  "+Valor;
            RandomAccessFile traductor= new RandomAccessFile("LEXEMAS.txt","rw");
            traductor.seek(traductor.length());
            traductor.writeBytes(regreso);
            traductor.writeChar(enter);
            traductor.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Lexico.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Lexico.class.getName()).log(Level.SEVERE, null, ex);
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexico(java.io.Reader in) {
          /* Se inicializa el txt de LEXEMAS.txt, se sobreescribe el archivo para dejarlo vacio*/
       try {
            RandomAccessFile traductor= new RandomAccessFile("LEXEMAS.txt","rw");
            traductor.setLength(0);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Lexico.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Lexico.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        /* Se inicializa el txt de ERRORES.txt, se sobreescribe el archivo para dejarlo vacio*/
        try {
            RandomAccessFile errores= new RandomAccessFile("ERRORES.txt","rw");
            errores.setLength(0);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Lexico.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Lexico.class.getName()).log(Level.SEVERE, null, ex);
        }

    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("error: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthorErr("ERROR ---- ",yytext());
            }
            // fall through
          case 70: break;
          case 2:
            { System.out.println("encontre un tabulador: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
            }
            // fall through
          case 71: break;
          case 3:
            { System.out.print(yytext());
            }
            // fall through
          case 72: break;
          case 4:
            { System.out.println("encontre un espacio en blanco: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
            }
            // fall through
          case 73: break;
          case 5:
            { System.out.println("encontre un signo: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("COMILLAS ----- ",yytext());
            }
            // fall through
          case 74: break;
          case 6:
            { System.out.println("encontre un operador: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("OPERADOR ----- ",yytext());
            }
            // fall through
          case 75: break;
          case 7:
            { System.out.println("encontre un signo: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("PARENTESIS1 ----- ",yytext());
            }
            // fall through
          case 76: break;
          case 8:
            { System.out.println("encontre un signo: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("PARENTESIS2 ----- ",yytext());
            }
            // fall through
          case 77: break;
          case 9:
            { System.out.println("encontre un operador: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("MAS ----- ",yytext());
            }
            // fall through
          case 78: break;
          case 10:
            { System.out.println("encontre un signo: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("COMA ----- ",yytext());
            }
            // fall through
          case 79: break;
          case 11:
            { System.out.println("encontre un operador: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("MENOS ----- ",yytext());
            }
            // fall through
          case 80: break;
          case 12:
            { System.out.println("encontre un numero: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("NUMEROENTERO ----- ",yytext());
            }
            // fall through
          case 81: break;
          case 13:
            { System.out.println("encontre un signo: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("DOSPUNTOS ----- ",yytext());
            }
            // fall through
          case 82: break;
          case 14:
            { System.out.println("encontre un signo: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("PUNTOCOMA ----- ",yytext());
            }
            // fall through
          case 83: break;
          case 15:
            { System.out.println("encontre un operador: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("MENOR ----- ",yytext());
            }
            // fall through
          case 84: break;
          case 16:
            { System.out.println("encontre un operador: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("IGUAL ----- ",yytext());
            }
            // fall through
          case 85: break;
          case 17:
            { System.out.println("encontre un operador: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("MAYOR ----- ",yytext());
            }
            // fall through
          case 86: break;
          case 18:
            { System.out.println("encontre una var de Metodo: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("ID_METODO ----- ",yytext());
            }
            // fall through
          case 87: break;
          case 19:
            { System.out.println("encontre una variable: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("ID ----- ",yytext());
            }
            // fall through
          case 88: break;
          case 20:
            { System.out.println("encontre un signo: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("LLAVE1 ----- ",yytext());
            }
            // fall through
          case 89: break;
          case 21:
            { System.out.println("encontre un signo: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("LLAVE2 ----- ",yytext());
            }
            // fall through
          case 90: break;
          case 22:
            { System.out.println("encontre un operador: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("NOIGUAL ----- ",yytext());
            }
            // fall through
          case 91: break;
          case 23:
            { System.out.println("encontre una cadena: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("CADENA ----- ",yytext());
            }
            // fall through
          case 92: break;
          case 24:
            { System.out.println("encontre un comentario A: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("COMENTARIOA ----- ",yytext());
            }
            // fall through
          case 93: break;
          case 25:
            { System.out.println("encontre una Numero Malo: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthorErr("NUMEROMALO ----- ",yytext());
            }
            // fall through
          case 94: break;
          case 26:
            { System.out.println("encontre una palabra reservada ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("OR ----- ",yytext());
            }
            // fall through
          case 95: break;
          case 27:
            { System.out.println("encontre una palabra reservada ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("SI ----- ",yytext());
            }
            // fall through
          case 96: break;
          case 28:
            { System.out.println("encontre una real: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("REAL ----- ",yytext());
            }
            // fall through
          case 97: break;
          case 29:
            { System.out.println("encontre una palabra reservada ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("AND ----- ",yytext());
            }
            // fall through
          case 98: break;
          case 30:
            { System.out.println("encontre un comentario B: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("COMENTARIOB ----- ",yytext());
            }
            // fall through
          case 99: break;
          case 31:
            { System.out.println("encontre una palabra reservada ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("LEER ----- ",yytext());
            }
            // fall through
          case 100: break;
          case 32:
            { System.out.println("encontre una palabra reservada: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("NULO ----- ",yytext());
            }
            // fall through
          case 101: break;
          case 33:
            { System.out.println("encontre una función especial (matemática): ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("RAIZ ----- ",yytext());
            }
            // fall through
          case 102: break;
          case 34:
            { System.out.println("encontre una palabra reservada: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("REAL ----- ",yytext());
            }
            // fall through
          case 103: break;
          case 35:
            { System.out.println("encontre una función especial (matemática): ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("SENO ----- ",yytext());
            }
            // fall through
          case 104: break;
          case 36:
            { System.out.println("encontre una palabra reservada ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("SINO ----- ",yytext());
            }
            // fall through
          case 105: break;
          case 37:
            { System.out.println("encontre una palabra reservada: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("CLASE ----- ",yytext());
            }
            // fall through
          case 106: break;
          case 38:
            { System.out.println("encontre una palabra reservada ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("DESDE ----- ",yytext());
            }
            // fall through
          case 107: break;
          case 39:
            { System.out.println("encontre un falso ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("FALSO ----- ",yytext());
            }
            // fall through
          case 108: break;
          case 40:
            { System.out.println("encontre una palabra reservada ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("HACER ----- ",yytext());
            }
            // fall through
          case 109: break;
          case 41:
            { System.out.println("encontre una palabra reservada: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("CADENA ----- ",yytext());
            }
            // fall through
          case 110: break;
          case 42:
            { System.out.println("encontre una función especial (matemática): ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("COSENO ----- ",yytext());
            }
            // fall through
          case 111: break;
          case 43:
            { System.out.println("encontre una palabra reservada: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("ENTERO ----- ",yytext());
            }
            // fall through
          case 112: break;
          case 44:
            { System.out.println("encontre una palabra reservada: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("BOOLEANO ----- ",yytext());
            }
            // fall through
          case 113: break;
          case 45:
            { System.out.println("encontre una palabra reservada: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("INCLUIR ----- ",yytext());
            }
            // fall through
          case 114: break;
          case 46:
            { System.out.println("encontre una palabra reservada: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("METODOS ----- ",yytext());
            }
            // fall through
          case 115: break;
          case 47:
            { System.out.println("encontre una palabra reservada ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("DEVOLVER ----- ",yytext());
            }
            // fall through
          case 116: break;
          case 48:
            { System.out.println("encontre una palabra reservada ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("ELIMINAR ----- ",yytext());
            }
            // fall through
          case 117: break;
          case 49:
            { System.out.println("encontre una palabra reservada ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("ENTONCES ----- ",yytext());
            }
            // fall through
          case 118: break;
          case 50:
            { System.out.println("encontre una palabra reservada ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("ESCRIBIR ----- ",yytext());
            }
            // fall through
          case 119: break;
          case 51:
            { System.out.println("encontre una palabra reservada: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("EXTIENDE ----- ",yytext());
            }
            // fall through
          case 120: break;
          case 52:
            { System.out.println("encontre una palabra reservada ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("MIENTRAS ----- ",yytext());
            }
            // fall through
          case 121: break;
          case 53:
            { System.out.println("encontre una palabra reservada: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("PRIVADAS ----- ",yytext());
            }
            // fall through
          case 122: break;
          case 54:
            { System.out.println("encontre una palabra reservada: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("PRIVADOS ----- ",yytext());
            }
            // fall through
          case 123: break;
          case 55:
            { System.out.println("encontre una palabra reservada: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("PUBLICAS ----- ",yytext());
            }
            // fall through
          case 124: break;
          case 56:
            { System.out.println("encontre una palabra reservada: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("PUBLICOS ----- ",yytext());
            }
            // fall through
          case 125: break;
          case 57:
            { System.out.println("encontre una función especial (matemática): ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("TANGENTE ----- ",yytext());
            }
            // fall through
          case 126: break;
          case 58:
            { System.out.println("encontre una palabra reservada ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("PRINCIPAL ----- ",yytext());
            }
            // fall through
          case 127: break;
          case 59:
            { System.out.println("encontre una función especial (matemática): ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("LOGARITMO ----- ",yytext());
            }
            // fall through
          case 128: break;
          case 60:
            { System.out.println("encontre un verdadero ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("VERDADERO ----- ",yytext());
            }
            // fall through
          case 129: break;
          case 61:
            { System.out.println("encontre una palabra reservada ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("DESTRUCTOR ----- ",yytext());
            }
            // fall through
          case 130: break;
          case 62:
            { System.out.println("encontre una palabra reservada ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("INSTANCIAR ----- ",yytext());
            }
            // fall through
          case 131: break;
          case 63:
            { System.out.println("encontre una palabra reservada: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("PROTEGIDAS ----- ",yytext());
            }
            // fall through
          case 132: break;
          case 64:
            { System.out.println("encontre una palabra reservada: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("PROTEGIDOS ----- ",yytext());
            }
            // fall through
          case 133: break;
          case 65:
            { System.out.println("encontre una función especial (conversion): ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("CADENAAREAL ----- ",yytext());
            }
            // fall through
          case 134: break;
          case 66:
            { System.out.println("encontre una palabra reservada ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("CONSTRUCTOR ----- ",yytext());
            }
            // fall through
          case 135: break;
          case 67:
            { System.out.println("encontre una palabra reservada: ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("PROPIEDADES ----- ",yytext());
            }
            // fall through
          case 136: break;
          case 68:
            { System.out.println("encontre una función especial (conversion): ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("CADENAAENTERO ----- ",yytext());
            }
            // fall through
          case 137: break;
          case 69:
            { System.out.println("encontre una función especial (conversion): ["+ yytext() + "] en linea: " 
    + (yyline+1)  + " columna: " + (yycolumn+1));
    LexLuthor("CADENAABOOLEANO ----- ",yytext());
            }
            // fall through
          case 138: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexico [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexico scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexico(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
