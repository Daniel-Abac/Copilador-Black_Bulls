package url.compilador;

// ------------- Terminales -------------------
terminal CADENA,COMENTARIOA,COMENTARIOB;
terminal VERDADERO,FALSO,SI,ESCRIBIR,LEER;
terminal SINO,ENTONCES,DESDE,MIENTRAS,DEVOLVER;
terminal HACER,INSTANCIAR,ELIMINAR,CONSTRUCTOR;
terminal DESTRUCTOR,AND,OR,PRINCIPAL,INCLUIR,CLASE;
terminal EXTIENDE,ENTEROR,REALR,CADENAR,BOOLEANOR;
terminal NULO,PROPIEDADES,METODOS,PUBLICAS,PRIVADAS;
terminal PROTEGIDAS,PUBLICOS,PRIVADOS,PROTEGIDOS;
terminal SENO,COSENO,TANGENTE,LOGARITMO,RAIZ,CADENAAENTERO;
terminal CADENAAREAL,CADENAABOOLEANO,DOSPUNTOS,PUNTOCOMA;
terminal COMA,PARENTESIS1,PARENTESIS2,LLAVE1,LLAVE2;
terminal COMILLAS,TABULADOR,IGUAL,OPERADORA,MAS;
terminal MENOS,MENOR,MAYOR,NOIGUAL,REAL,NUMEROENTERO,ID;
terminal ID_METODO,MAYORIGUAL,MENORIGUAL,DECREMENTO,INCREMENTO,NUEVO, INCREMENTAR,DECREMENTAR,ENTER;
terminal USOMETODO,PUNTO;
terminal MULTIPLICACION, DIVISION;

// ------------- NO Terminales -------------------
non terminal S;
non terminal READ,WRITE,WRITEAUX,WRITEAUXX,DEFVAR;
non terminal VARENTERO,VARREAL,VARCADENA,VARMETODO,VARBOOLEANO,REPEATID,OPERACION;
non terminal OPERANDOS,OPERANDO_ENTERO,SIGNO_MATE,OPERANDO_REAL, LINEAS, LINEA ;
non terminal Parametros, LineaConstructor,LineaDestructor, ContenidoConstructor, Funcion, FuncionesEspeciales, LlamadaFuncion, FuncionesMatematicas;
non terminal INSTANCIA, INSTANCIARN, DELATE,LLAMADAFUNCION, CONBO, CONBOLEANA, CONBOLEANOID, CONBOLEANOC;
non terminal OPERANDO_MAS,OPERANDO_MENOS,OPERANDO_INCREMENTO,OPERANDO_DECREMENTO,OPERANDO_LOGICOS;
non terminal CONDICION_ITERATIVA ,FUNCION_ITERATIVA,DEC,SIGNOS_ITERATIVA;
non terminal ContenidoFuncion, Asignacion, Propiedades, PropiedadesEspecificas, DeclaracionMetodos;

/*----------------Iniciamos en S----------------*/
/* ESTE ES SOLO UN EJEMPLO, PERO AQUÍ DEBEN DE IR SUS PRODUCCIONES DE ESTA VEZ */

S::=                    LINEAS;
LINEAS::=               LINEA LINEAS
                        | LINEA
                        | ENTER LINEAS
                        | ENTER;
LINEA::=              READ
                      | WRITE
                      | DEFVAR  
                      | OPERACION
                      | FUNCION_ITERATIVA
                      | LineaConstructor
                      | LineaDestructor
                      | Funcion
                      | FuncionesEspeciales
                      | LlamadaFuncion
                      | FuncionesMatematicas
                      | INSTANCIA
                      | INSTANCIARN
                      | DELATE
                      | CONBO
                      | Asignacion
                      | Propiedades
                      | PropiedadesEspecificas
                      | DeclaracionMetodos
                       ;
READ ::=              LEER ID PUNTOCOMA {:
                            System.out.println("Encontré un LEER ID PUNTOCOMA");
                      :};
WRITE ::=             ESCRIBIR CADENA WRITEAUX {:
                            System.out.println("Encontré un ESCRIBIR CADENA WRITEAUX");
                      :}
                      | ESCRIBIR ID WRITEAUX {:
                            System.out.println("Encontré un ESCRIBIR ID WRITEAUX");
                      :};
WRITEAUX::=           WRITEAUXX PUNTOCOMA;
WRITEAUXX::=          WRITEAUXX COMA CADENA
                      | WRITEAUXX COMA ID
                      | COMA CADENA
                      | COMA ID;
DEFVAR::=              VARENTERO{:
                            System.out.println("Encontré un VARENTERO");
                      :}
                      |VARREAL{:
                            System.out.println("Encontré un VARREAL");
                      :}
                      |VARCADENA{:
                            System.out.println("Encontré un VARCADENA");
                      :}
                      |VARBOOLEANO{:
                            System.out.println("Encontré un VARBOOLEANO");
                      :}
                      |VARMETODO{:
                            System.out.println("Encontré un VARMETODO");
                      :};
VARENTERO::=         ENTEROR REPEATID
                     |ENTEROR REPEATID IGUAL NUMEROENTERO;
VARREAL::=           REALR REPEATID
                     |REALR REPEATID IGUAL REAL;
VARBOOLEANO::=       BOOLEANOR REPEATID
                     |BOOLEANOR REPEATID IGUAL VERDADERO
                     |BOOLEANOR REPEATID IGUAL FALSO;
VARCADENA::=         CADENAR REPEATID
                     |CADENAR REPEATID IGUAL CADENA;
VARMETODO::=         ID_METODO REPEATID
                     |ID_METODO REPEATID IGUAL NUEVO ID_METODO PARENTESIS1 PARENTESIS2;
REPEATID::=          ID COMA REPEATID
                     |ID;
OPERACION ::=               ID IGUAL OPERANDOS {:
                            System.out.println("Encontré una operación");
                            :}
                            ;

OPERANDOS ::=               OPERANDO_ENTERO
                            |OPERANDO_REAL
                            |OPERANDO_MAS
                            |OPERANDO_MENOS
                            |OPERANDO_INCREMENTO
                            |OPERANDO_DECREMENTO
                            |OPERANDO_LOGICOS;

OPERANDO_ENTERO ::=         NUMEROENTERO SIGNO_MATE OPERANDO_ENTERO
                            |NUMEROENTERO;

OPERANDO_REAL::=            REAL SIGNO_MATE OPERANDO_REAL
                            |REAL;


OPERANDO_MAS ::=            MAS NUMEROENTERO
                            |MAS ID;

OPERANDO_MENOS ::=          MENOS NUMEROENTERO
                            |MENOS ID;


OPERANDO_INCREMENTO ::=     INCREMENTO NUMEROENTERO
                            |INCREMENTO ID;

OPERANDO_DECREMENTO ::=      NUMEROENTERO DECREMENTO
                            |ID DECREMENTO;


OPERANDO_LOGICOS ::=        ID AND OPERANDO_LOGICOS
                            |ID OPERANDO_LOGICOS
                            |OR ID;

SIGNO_MATE ::=              MAS
                            |MENOS
                            |OPERADORA;

DeclaracionMetodos ::= METODOS PUBLICOS DOSPUNTOS {:
                            System.out.println("Encontré la seccion de declaracion de metodos publicos");
                        :}
                | METODOS PRIVADOS DOSPUNTOS {:
                            System.out.println("Encontré la seccion de declaracion de metodos privados");
                        :}
                | METODOS PROTEGIDOS DOSPUNTOS {:
                            System.out.println("Encontré la seccion de declaracion de metodos protegidos");
                        :}
;
Propiedades ::= PROPIEDADES PUBLICAS DOSPUNTOS {:
                            System.out.println("Encontré la seccion de propiedades publicas");
                        :}
                | PROPIEDADES PRIVADAS DOSPUNTOS {:
                            System.out.println("Encontré la declaracion de Propiedades privadas");
                        :}
                | PROPIEDADES PROTEGIDAS DOSPUNTOS {:
                            System.out.println("Encontré la declaracion de Propiedades protegidas");
                        :}
;
PropiedadesEspecificas ::= TABULADOR  ENTEROR REPEATID {:
                            System.out.println("Encontré una propiedad entero");
                        :}
                | TABULADOR REALR REPEATID {:
                            System.out.println("Encontré una propiedad real");
                        :}
                | TABULADOR CADENAR  REPEATID {:
                            System.out.println("Encontré una propiedad cadena");
                        :}
                | TABULADOR BOOLEANOR  REPEATID {:
                            System.out.println("Encontré una propiedad boleana");
                        :}
;
LineaConstructor ::= CONSTRUCTOR PARENTESIS1 Parametros PARENTESIS2 {:
                            System.out.println("Encontré un Constructor");
                      :};
Asignacion ::= TABULADOR ID IGUAL ID {:
                            System.out.println("Encontré una asignacion");
                      :};

Parametros ::= ENTEROR ID COMA Parametros {:
                            System.out.println("Encontré un Parametro entero");
             :}
         | REALR ID COMA Parametros {:
                            System.out.println("Encontré un Parametro real");
             :}
         | CADENAR ID COMA Parametros {:
                            System.out.println("Encontré un Parametro cadena");
             :}
         | BOOLEANOR ID COMA Parametros {:
                            System.out.println("Encontré un Parametro Boleano");
             :}
         | NULO ID COMA Parametros {:
                            System.out.println("Encontré un Parametro Nulo");
             :}
         | ENTEROR ID {:
                            System.out.println("Encontré un Parametro entero al final");
             :}
         | REALR ID {:
                            System.out.println("Encontré un Parametro real al final");
             :}
         | CADENAR ID {:
                            System.out.println("Encontré un Parametro cadena al final");
             :}
         | BOOLEANOR ID {:
                            System.out.println("Encontré un Parametro booleano al final");
             :}
         | NULO ID {:
                            System.out.println("Encontré un Parametro nulo al final");
             :}
               ;

Funcion ::= ENTEROR ID PARENTESIS1 Parametros PARENTESIS2 ENTER ContenidoFuncion {:
                            System.out.println("Encontré una Funcion");
                      :}
                       | ENTEROR ID USOMETODO ENTER ContenidoFuncion {:
                            System.out.println("Encontré una Funcion sin parametros");
                      :};
ContenidoFuncion::= DEVOLVER ID MAS ID {:
                            System.out.println("Encontré el contenido de una funcion suelta");
                      :}
                       | DEVOLVER ID MENOS ID {:
                            System.out.println("Encontré el contenido de una funcion suelta");
                      :}
                        | DEVOLVER ID MULTIPLICACION ID {:
                            System.out.println("Encontré el contenido de una funcion suelta");
                      :}
                        | DEVOLVER ID DIVISION ID {:
                            System.out.println("Encontré el contenido de una funcion suelta");
                      :}
                        ;
LineaDestructor ::= DESTRUCTOR USOMETODO {:
                            System.out.println("Encontré un Destructor");
                      :};

FUNCION_ITERATIVA ::=       DESDE DEFVAR MIENTRAS CONDICION_ITERATIVA DEC NUMEROENTERO HACER{:
                            System.out.println("Encontre una funcion iterativa");
                            :}
                            |DESDE ID MIENTRAS CONDICION_ITERATIVA DEC NUMEROENTERO HACER{:
                            System.out.println("Encontre una funcion iterativa");
                            :}
                            |DESDE OPERACION MIENTRAS CONDICION_ITERATIVA HACER{:
                            System.out.println("Encontre una funcion iterativa");
                            :}
                            ;


CONDICION_ITERATIVA ::=     ID SIGNOS_ITERATIVA NUMEROENTERO 
                            ;

DEC ::=                     INCREMENTAR
                            |DECREMENTAR;

SIGNOS_ITERATIVA ::=        IGUAL
                            |NOIGUAL
                            |MENOR
                            |MENORIGUAL
                            |MAYOR
                            |MAYORIGUAL;
FuncionesEspeciales ::= ENTEROR CADENAAENTERO PARENTESIS1 CADENAR ID PARENTESIS2 {:
                            System.out.println("Encontré una Funcion de Conversion Cadena -> Entero");
                        :}
              | REALR CADENAAREAL PARENTESIS1 CADENAR ID PARENTESIS2 {:
                            System.out.println("Encontré una Funcion de Conversion Cadena -> Real");
                        :}
              | BOOLEANOR CADENAABOOLEANO PARENTESIS1 CADENAR ID PARENTESIS2 {:
                            System.out.println("Encontré una Funcion de Conversion Cadena -> Boleano");
                         :}
                        ;

FuncionesMatematicas ::= REALR SENO PARENTESIS1 REALR ID PARENTESIS2 {:
                            System.out.println("Encontré una Funcion matemática de SENO");
                        :}
                        | REALR COSENO PARENTESIS1 REALR ID PARENTESIS2 {:
                            System.out.println("Encontré una Funcion matemática de COSENO");
                        :}
                        | REALR TANGENTE PARENTESIS1 REALR ID PARENTESIS2 {:
                            System.out.println("Encontré una Funcion matemática de TANGENTE");
                        :}
                        | REALR LOGARITMO PARENTESIS1 REALR ID PARENTESIS2 {:
                            System.out.println("Encontré una Funcion matemática de LOGARITMO");
                        :}
                        | REALR RAIZ PARENTESIS1 REALR ID PARENTESIS2 {:
                            System.out.println("Encontré una Funcion matemática de RAIZ");
                        :}
                        ;
INSTANCIA ::=         ESCRIBIR ID PUNTO INSTANCIA
            |ID
                        {:
                            System.out.println("Encontré una instancia");
                        :};

INSTANCIARN ::=        ID IGUAL INSTANCIAR LLAMADAFUNCION
            {:
                            System.out.println("Encontré una instancia DESPUES DE ELIMINADA");
                        :};

LLAMADAFUNCION  ::= ID_METODO USOMETODO {:
                            System.out.println("Encontré una llamada a Funcion");
                      :};

DELATE ::=        ELIMINAR ID
            {:
                            System.out.println("Encontré una ELIMINACION DE INSTANCIA");
                        :};

CONBO ::=		ID IGUAL CONBOLEANA{:
                            System.out.println("Encontré una CONDICION BOLEANA");
                        :};


CONBOLEANA ::=		ID CONBOLEANOID
			|ID CONBOLEANOC
			|NUMEROENTERO CONBOLEANOID
			|NUMEROENTERO CONBOLEANOC;


CONBOLEANOID ::=	MAYOR ID
			|MENOR ID
			|IGUAL ID
			|NOIGUAL ID;

CONBOLEANOC ::=	MAYOR NUMEROENTERO
			|MENOR NUMEROENTERO
			|IGUAL NUMEROENTERO
			|NOIGUAL NUMEROENTERO;