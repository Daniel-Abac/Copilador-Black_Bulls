
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package url.compilador;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\157\000\002\002\003\000\002\002\004\000\002\023" +
    "\004\000\002\023\003\000\002\023\004\000\002\023\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\003\005\000\002\004\005\000" +
    "\002\004\005\000\002\005\004\000\002\006\005\000\002" +
    "\006\005\000\002\006\004\000\002\006\004\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\010\004\000\002\010\006\000" +
    "\002\011\004\000\002\011\006\000\002\014\004\000\002" +
    "\014\006\000\002\014\006\000\002\012\004\000\002\012" +
    "\006\000\002\013\004\000\002\013\011\000\002\015\005" +
    "\000\002\015\003\000\002\016\005\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\020" +
    "\005\000\002\020\003\000\002\022\005\000\002\022\003" +
    "\000\002\041\004\000\002\041\004\000\002\042\004\000" +
    "\002\042\004\000\002\043\004\000\002\043\004\000\002" +
    "\044\004\000\002\044\004\000\002\045\005\000\002\045" +
    "\004\000\002\045\004\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\026\006\000\002\025\006\000" +
    "\002\025\006\000\002\025\006\000\002\025\006\000\002" +
    "\025\006\000\002\025\004\000\002\025\004\000\002\025" +
    "\004\000\002\025\004\000\002\025\004\000\002\031\007" +
    "\000\002\027\004\000\002\047\011\000\002\047\011\000" +
    "\002\047\007\000\002\046\005\000\002\050\003\000\002" +
    "\050\003\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\032\010\000\002\032\010\000\002\032\010\000" +
    "\002\033\004\000\002\034\010\000\002\034\010\000\002" +
    "\034\010\000\002\034\010\000\002\034\010\000\002\035" +
    "\006\000\002\035\003\000\002\036\006\000\002\040\004" +
    "\000\002\037\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\034\012\042\013\014\016\045\023\017\024" +
    "\031\025\027\034\033\035\046\036\043\037\044\103\023" +
    "\104\025\114\024\001\002\000\036\002\ufffe\012\042\013" +
    "\014\016\045\023\017\024\031\025\027\034\033\035\046" +
    "\036\043\037\044\103\023\104\025\114\024\001\002\000" +
    "\036\002\ufff5\012\ufff5\013\ufff5\016\ufff5\023\ufff5\024\ufff5" +
    "\025\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\103\ufff5\104" +
    "\ufff5\114\ufff5\001\002\000\036\002\ufff1\012\ufff1\013\ufff1" +
    "\016\ufff1\023\ufff1\024\ufff1\025\ufff1\034\ufff1\035\ufff1\036" +
    "\ufff1\037\ufff1\103\ufff1\104\ufff1\114\ufff1\001\002\000\036" +
    "\002\ufffb\012\ufffb\013\ufffb\016\ufffb\023\ufffb\024\ufffb\025" +
    "\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\103\ufffb\104\ufffb" +
    "\114\ufffb\001\002\000\036\002\ufff7\012\ufff7\013\ufff7\016" +
    "\ufff7\023\ufff7\024\ufff7\025\ufff7\034\ufff7\035\ufff7\036\ufff7" +
    "\037\ufff7\103\ufff7\104\ufff7\114\ufff7\001\002\000\036\002" +
    "\ufff8\012\ufff8\013\ufff8\016\ufff8\023\ufff8\024\ufff8\025\ufff8" +
    "\034\ufff8\035\ufff8\036\ufff8\037\ufff8\103\ufff8\104\ufff8\114" +
    "\ufff8\001\002\000\036\002\ufff2\012\ufff2\013\ufff2\016\ufff2" +
    "\023\ufff2\024\ufff2\025\ufff2\034\ufff2\035\ufff2\036\ufff2\037" +
    "\ufff2\103\ufff2\104\ufff2\114\ufff2\001\002\000\040\002\uffe4" +
    "\012\uffe4\013\uffe4\016\uffe4\017\uffe4\023\uffe4\024\uffe4\025" +
    "\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\103\uffe4\104\uffe4" +
    "\114\uffe4\001\002\000\004\103\337\001\002\000\004\002" +
    "\336\001\002\000\036\002\uffef\012\uffef\013\uffef\016\uffef" +
    "\023\uffef\024\uffef\025\uffef\034\uffef\035\uffef\036\uffef\037" +
    "\uffef\103\uffef\104\uffef\114\uffef\001\002\000\004\103\335" +
    "\001\002\000\004\002\001\001\002\000\040\002\uffe5\012" +
    "\uffe5\013\uffe5\016\uffe5\017\uffe5\023\uffe5\024\uffe5\025\uffe5" +
    "\034\uffe5\035\uffe5\036\uffe5\037\uffe5\103\uffe5\104\uffe5\114" +
    "\uffe5\001\002\000\036\002\ufffa\012\ufffa\013\ufffa\016\ufffa" +
    "\023\ufffa\024\ufffa\025\ufffa\034\ufffa\035\ufffa\036\ufffa\037" +
    "\ufffa\103\ufffa\104\ufffa\114\ufffa\001\002\000\040\002\uff96" +
    "\012\uff96\013\uff96\016\uff96\023\uff96\024\uff96\025\uff96\034" +
    "\uff96\035\uff96\036\uff96\037\uff96\072\330\103\uff96\104\uff96" +
    "\114\uff96\001\002\000\036\002\ufffc\012\042\013\014\016" +
    "\045\023\017\024\031\025\027\034\033\035\046\036\043" +
    "\037\044\103\023\104\025\114\024\001\002\000\006\103" +
    "\051\115\326\001\002\000\036\002\ufff4\012\ufff4\013\ufff4" +
    "\016\ufff4\023\ufff4\024\ufff4\025\ufff4\034\ufff4\035\ufff4\036" +
    "\ufff4\037\ufff4\103\ufff4\104\ufff4\114\ufff4\001\002\000\004" +
    "\115\325\001\002\000\036\002\ufff6\012\ufff6\013\ufff6\016" +
    "\ufff6\023\ufff6\024\ufff6\025\ufff6\034\ufff6\035\ufff6\036\ufff6" +
    "\037\ufff6\103\ufff6\104\ufff6\114\ufff6\001\002\000\004\064" +
    "\322\001\002\000\040\002\uffe1\012\uffe1\013\uffe1\016\uffe1" +
    "\017\uffe1\023\uffe1\024\uffe1\025\uffe1\034\uffe1\035\uffe1\036" +
    "\uffe1\037\uffe1\103\uffe1\104\uffe1\114\uffe1\001\002\000\006" +
    "\056\266\103\265\001\002\000\040\002\uffe3\012\uffe3\013" +
    "\uffe3\016\uffe3\017\uffe3\023\uffe3\024\uffe3\025\uffe3\034\uffe3" +
    "\035\uffe3\036\uffe3\037\uffe3\103\uffe3\104\uffe3\114\uffe3\001" +
    "\002\000\036\002\ufff9\012\ufff9\013\ufff9\016\ufff9\023\ufff9" +
    "\024\ufff9\025\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\103" +
    "\ufff9\104\ufff9\114\ufff9\001\002\000\036\002\ufff0\012\ufff0" +
    "\013\ufff0\016\ufff0\023\ufff0\024\ufff0\025\ufff0\034\ufff0\035" +
    "\ufff0\036\ufff0\037\ufff0\103\ufff0\104\ufff0\114\ufff0\001\002" +
    "\000\040\002\uffe2\012\uffe2\013\uffe2\016\uffe2\017\uffe2\023" +
    "\uffe2\024\uffe2\025\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2" +
    "\103\uffe2\104\uffe2\114\uffe2\001\002\000\036\002\uffee\012" +
    "\uffee\013\uffee\016\uffee\023\uffee\024\uffee\025\uffee\034\uffee" +
    "\035\uffee\036\uffee\037\uffee\103\uffee\104\uffee\114\uffee\001" +
    "\002\000\036\002\ufff3\012\ufff3\013\ufff3\016\ufff3\023\ufff3" +
    "\024\ufff3\025\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\103" +
    "\ufff3\104\ufff3\114\ufff3\001\002\000\006\004\245\103\244" +
    "\001\002\000\004\103\051\001\002\000\006\060\234\103" +
    "\051\001\002\000\016\034\117\035\121\036\043\037\114" +
    "\103\115\104\116\001\002\000\020\051\052\052\053\053" +
    "\055\054\047\055\050\057\056\103\051\001\002\000\004" +
    "\064\107\001\002\000\004\064\103\001\002\000\044\002" +
    "\uffd4\012\uffd4\013\uffd4\016\uffd4\017\uffd4\023\uffd4\024\uffd4" +
    "\025\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\063\101\072" +
    "\uffd4\103\uffd4\104\uffd4\114\uffd4\001\002\000\004\064\075" +
    "\001\002\000\004\064\071\001\002\000\042\002\uffde\012" +
    "\uffde\013\uffde\016\uffde\017\uffde\023\uffde\024\uffde\025\uffde" +
    "\034\uffde\035\uffde\036\uffde\037\uffde\072\067\103\uffde\104" +
    "\uffde\114\uffde\001\002\000\004\064\063\001\002\000\004" +
    "\064\057\001\002\000\004\036\060\001\002\000\004\103" +
    "\061\001\002\000\004\065\062\001\002\000\036\002\uff9f" +
    "\012\uff9f\013\uff9f\016\uff9f\023\uff9f\024\uff9f\025\uff9f\034" +
    "\uff9f\035\uff9f\036\uff9f\037\uff9f\103\uff9f\104\uff9f\114\uff9f" +
    "\001\002\000\004\035\064\001\002\000\004\103\065\001" +
    "\002\000\004\065\066\001\002\000\036\002\uff9a\012\uff9a" +
    "\013\uff9a\016\uff9a\023\uff9a\024\uff9a\025\uff9a\034\uff9a\035" +
    "\uff9a\036\uff9a\037\uff9a\103\uff9a\104\uff9a\114\uff9a\001\002" +
    "\000\004\101\070\001\002\000\040\002\uffdd\012\uffdd\013" +
    "\uffdd\016\uffdd\017\uffdd\023\uffdd\024\uffdd\025\uffdd\034\uffdd" +
    "\035\uffdd\036\uffdd\037\uffdd\103\uffdd\104\uffdd\114\uffdd\001" +
    "\002\000\004\035\072\001\002\000\004\103\073\001\002" +
    "\000\004\065\074\001\002\000\036\002\uff9b\012\uff9b\013" +
    "\uff9b\016\uff9b\023\uff9b\024\uff9b\025\uff9b\034\uff9b\035\uff9b" +
    "\036\uff9b\037\uff9b\103\uff9b\104\uff9b\114\uff9b\001\002\000" +
    "\004\035\076\001\002\000\004\103\077\001\002\000\004" +
    "\065\100\001\002\000\036\002\uff9c\012\uff9c\013\uff9c\016" +
    "\uff9c\023\uff9c\024\uff9c\025\uff9c\034\uff9c\035\uff9c\036\uff9c" +
    "\037\uff9c\103\uff9c\104\uff9c\114\uff9c\001\002\000\004\103" +
    "\051\001\002\000\042\002\uffd5\012\uffd5\013\uffd5\016\uffd5" +
    "\017\uffd5\023\uffd5\024\uffd5\025\uffd5\034\uffd5\035\uffd5\036" +
    "\uffd5\037\uffd5\072\uffd5\103\uffd5\104\uffd5\114\uffd5\001\002" +
    "\000\004\035\104\001\002\000\004\103\105\001\002\000" +
    "\004\065\106\001\002\000\036\002\uff98\012\uff98\013\uff98" +
    "\016\uff98\023\uff98\024\uff98\025\uff98\034\uff98\035\uff98\036" +
    "\uff98\037\uff98\103\uff98\104\uff98\114\uff98\001\002\000\004" +
    "\035\110\001\002\000\004\103\111\001\002\000\004\065" +
    "\112\001\002\000\036\002\uff99\012\uff99\013\uff99\016\uff99" +
    "\023\uff99\024\uff99\025\uff99\034\uff99\035\uff99\036\uff99\037" +
    "\uff99\103\uff99\104\uff99\114\uff99\001\002\000\004\017\231" +
    "\001\002\000\004\103\051\001\002\000\006\017\154\072" +
    "\153\001\002\000\004\103\051\001\002\000\004\103\051" +
    "\001\002\000\004\017\122\001\002\000\004\103\051\001" +
    "\002\000\004\103\123\001\002\000\016\072\135\076\137" +
    "\077\140\100\136\105\133\106\132\001\002\000\006\112" +
    "\127\113\126\001\002\000\004\102\130\001\002\000\004" +
    "\102\uffa7\001\002\000\004\102\uffa8\001\002\000\004\021" +
    "\131\001\002\000\036\002\uffac\012\uffac\013\uffac\016\uffac" +
    "\023\uffac\024\uffac\025\uffac\034\uffac\035\uffac\036\uffac\037" +
    "\uffac\103\uffac\104\uffac\114\uffac\001\002\000\004\102\uffa3" +
    "\001\002\000\004\102\uffa1\001\002\000\004\102\141\001" +
    "\002\000\004\102\uffa6\001\002\000\004\102\uffa5\001\002" +
    "\000\004\102\uffa4\001\002\000\004\102\uffa2\001\002\000" +
    "\010\021\uffa9\112\uffa9\113\uffa9\001\002\000\042\002\uffe0" +
    "\012\uffe0\013\uffe0\016\uffe0\017\uffe0\023\uffe0\024\uffe0\025" +
    "\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\072\143\103\uffe0" +
    "\104\uffe0\114\uffe0\001\002\000\004\102\144\001\002\000" +
    "\040\002\uffdf\012\uffdf\013\uffdf\016\uffdf\017\uffdf\023\uffdf" +
    "\024\uffdf\025\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\103" +
    "\uffdf\104\uffdf\114\uffdf\001\002\000\042\002\uffd7\012\uffd7" +
    "\013\uffd7\016\uffd7\017\uffd7\023\uffd7\024\uffd7\025\uffd7\034" +
    "\uffd7\035\uffd7\036\uffd7\037\uffd7\072\146\103\uffd7\104\uffd7" +
    "\114\uffd7\001\002\000\004\111\147\001\002\000\004\104" +
    "\150\001\002\000\004\064\151\001\002\000\004\065\152" +
    "\001\002\000\040\002\uffd6\012\uffd6\013\uffd6\016\uffd6\017" +
    "\uffd6\023\uffd6\024\uffd6\025\uffd6\034\uffd6\035\uffd6\036\uffd6" +
    "\037\uffd6\103\uffd6\104\uffd6\114\uffd6\001\002\000\020\027" +
    "\177\074\171\075\164\101\173\102\175\103\172\110\174" +
    "\001\002\000\004\103\123\001\002\000\006\112\127\113" +
    "\126\001\002\000\004\102\157\001\002\000\004\021\160" +
    "\001\002\000\036\002\uffab\012\uffab\013\uffab\016\uffab\023" +
    "\uffab\024\uffab\025\uffab\034\uffab\035\uffab\036\uffab\037\uffab" +
    "\103\uffab\104\uffab\114\uffab\001\002\000\040\002\uffd1\012" +
    "\uffd1\013\uffd1\016\uffd1\017\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\034\uffd1\035\uffd1\036\uffd1\037\uffd1\103\uffd1\104\uffd1\114" +
    "\uffd1\001\002\000\040\002\uffd0\012\uffd0\013\uffd0\016\uffd0" +
    "\017\uffd0\023\uffd0\024\uffd0\025\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\037\uffd0\103\uffd0\104\uffd0\114\uffd0\001\002\000\040" +
    "\002\uffd3\012\uffd3\013\uffd3\016\uffd3\017\uffd3\023\uffd3\024" +
    "\uffd3\025\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\103\uffd3" +
    "\104\uffd3\114\uffd3\001\002\000\006\102\224\103\223\001" +
    "\002\000\040\002\uffce\012\uffce\013\uffce\016\uffce\017\uffce" +
    "\023\uffce\024\uffce\025\uffce\034\uffce\035\uffce\036\uffce\037" +
    "\uffce\103\uffce\104\uffce\114\uffce\001\002\000\040\002\uffd2" +
    "\012\uffd2\013\uffd2\016\uffd2\017\uffd2\023\uffd2\024\uffd2\025" +
    "\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\103\uffd2\104\uffd2" +
    "\114\uffd2\001\002\000\040\002\uffcd\012\uffcd\013\uffcd\016" +
    "\uffcd\017\uffcd\023\uffcd\024\uffcd\025\uffcd\034\uffcd\035\uffcd" +
    "\036\uffcd\037\uffcd\103\uffcd\104\uffcd\114\uffcd\001\002\000" +
    "\040\002\uffcf\012\uffcf\013\uffcf\016\uffcf\017\uffcf\023\uffcf" +
    "\024\uffcf\025\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\103" +
    "\uffcf\104\uffcf\114\uffcf\001\002\000\006\102\222\103\221" +
    "\001\002\000\012\026\216\027\177\103\214\107\215\001" +
    "\002\000\046\002\uffc8\012\uffc8\013\uffc8\016\uffc8\017\uffc8" +
    "\023\uffc8\024\uffc8\025\uffc8\034\uffc8\035\uffc8\036\uffc8\037" +
    "\uffc8\073\205\074\202\075\204\103\uffc8\104\uffc8\114\uffc8" +
    "\001\002\000\006\102\211\103\210\001\002\000\050\002" +
    "\uffca\012\uffca\013\uffca\016\uffca\017\uffca\023\uffca\024\uffca" +
    "\025\uffca\034\uffca\035\uffca\036\uffca\037\uffca\073\205\074" +
    "\202\075\204\103\uffca\104\uffca\107\201\114\uffca\001\002" +
    "\000\040\002\uffcc\012\uffcc\013\uffcc\016\uffcc\017\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc" +
    "\103\uffcc\104\uffcc\114\uffcc\001\002\000\004\103\200\001" +
    "\002\000\040\002\uffbd\012\uffbd\013\uffbd\016\uffbd\017\uffbd" +
    "\023\uffbd\024\uffbd\025\uffbd\034\uffbd\035\uffbd\036\uffbd\037" +
    "\uffbd\103\uffbd\104\uffbd\114\uffbd\001\002\000\040\002\uffc1" +
    "\012\uffc1\013\uffc1\016\uffc1\017\uffc1\023\uffc1\024\uffc1\025" +
    "\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\103\uffc1\104\uffc1" +
    "\114\uffc1\001\002\000\006\101\uffbc\102\uffbc\001\002\000" +
    "\004\102\207\001\002\000\006\101\uffbb\102\uffbb\001\002" +
    "\000\006\101\uffba\102\uffba\001\002\000\040\002\uffcb\012" +
    "\uffcb\013\uffcb\016\uffcb\017\uffcb\023\uffcb\024\uffcb\025\uffcb" +
    "\034\uffcb\035\uffcb\036\uffcb\037\uffcb\103\uffcb\104\uffcb\114" +
    "\uffcb\001\002\000\046\002\uffca\012\uffca\013\uffca\016\uffca" +
    "\017\uffca\023\uffca\024\uffca\025\uffca\034\uffca\035\uffca\036" +
    "\uffca\037\uffca\073\205\074\202\075\204\103\uffca\104\uffca" +
    "\114\uffca\001\002\000\040\002\uffc2\012\uffc2\013\uffc2\016" +
    "\uffc2\017\uffc2\023\uffc2\024\uffc2\025\uffc2\034\uffc2\035\uffc2" +
    "\036\uffc2\037\uffc2\103\uffc2\104\uffc2\114\uffc2\001\002\000" +
    "\040\002\uffc3\012\uffc3\013\uffc3\016\uffc3\017\uffc3\023\uffc3" +
    "\024\uffc3\025\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\103" +
    "\uffc3\104\uffc3\114\uffc3\001\002\000\004\101\173\001\002" +
    "\000\040\002\uffc9\012\uffc9\013\uffc9\016\uffc9\017\uffc9\023" +
    "\uffc9\024\uffc9\025\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9" +
    "\103\uffc9\104\uffc9\114\uffc9\001\002\000\010\026\216\027" +
    "\177\103\214\001\002\000\040\002\uffc0\012\uffc0\013\uffc0" +
    "\016\uffc0\017\uffc0\023\uffc0\024\uffc0\025\uffc0\034\uffc0\035" +
    "\uffc0\036\uffc0\037\uffc0\103\uffc0\104\uffc0\114\uffc0\001\002" +
    "\000\006\027\177\103\214\001\002\000\040\002\uffbe\012" +
    "\uffbe\013\uffbe\016\uffbe\017\uffbe\023\uffbe\024\uffbe\025\uffbe" +
    "\034\uffbe\035\uffbe\036\uffbe\037\uffbe\103\uffbe\104\uffbe\114" +
    "\uffbe\001\002\000\040\002\uffbf\012\uffbf\013\uffbf\016\uffbf" +
    "\017\uffbf\023\uffbf\024\uffbf\025\uffbf\034\uffbf\035\uffbf\036" +
    "\uffbf\037\uffbf\103\uffbf\104\uffbf\114\uffbf\001\002\000\040" +
    "\002\uffc6\012\uffc6\013\uffc6\016\uffc6\017\uffc6\023\uffc6\024" +
    "\uffc6\025\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\103\uffc6" +
    "\104\uffc6\114\uffc6\001\002\000\040\002\uffc7\012\uffc7\013" +
    "\uffc7\016\uffc7\017\uffc7\023\uffc7\024\uffc7\025\uffc7\034\uffc7" +
    "\035\uffc7\036\uffc7\037\uffc7\103\uffc7\104\uffc7\114\uffc7\001" +
    "\002\000\040\002\uffc4\012\uffc4\013\uffc4\016\uffc4\017\uffc4" +
    "\023\uffc4\024\uffc4\025\uffc4\034\uffc4\035\uffc4\036\uffc4\037" +
    "\uffc4\103\uffc4\104\uffc4\114\uffc4\001\002\000\040\002\uffc5" +
    "\012\uffc5\013\uffc5\016\uffc5\017\uffc5\023\uffc5\024\uffc5\025" +
    "\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\103\uffc5\104\uffc5" +
    "\114\uffc5\001\002\000\042\002\uffdc\012\uffdc\013\uffdc\016" +
    "\uffdc\017\uffdc\023\uffdc\024\uffdc\025\uffdc\034\uffdc\035\uffdc" +
    "\036\uffdc\037\uffdc\072\226\103\uffdc\104\uffdc\114\uffdc\001" +
    "\002\000\006\007\230\010\227\001\002\000\040\002\uffda" +
    "\012\uffda\013\uffda\016\uffda\017\uffda\023\uffda\024\uffda\025" +
    "\uffda\034\uffda\035\uffda\036\uffda\037\uffda\103\uffda\104\uffda" +
    "\114\uffda\001\002\000\040\002\uffdb\012\uffdb\013\uffdb\016" +
    "\uffdb\017\uffdb\023\uffdb\024\uffdb\025\uffdb\034\uffdb\035\uffdb" +
    "\036\uffdb\037\uffdb\103\uffdb\104\uffdb\114\uffdb\001\002\000" +
    "\004\103\123\001\002\000\004\021\233\001\002\000\036" +
    "\002\uffaa\012\uffaa\013\uffaa\016\uffaa\023\uffaa\024\uffaa\025" +
    "\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\103\uffaa\104\uffaa" +
    "\114\uffaa\001\002\000\004\064\235\001\002\000\004\036" +
    "\236\001\002\000\004\103\237\001\002\000\004\065\240" +
    "\001\002\000\036\002\uff9e\012\uff9e\013\uff9e\016\uff9e\023" +
    "\uff9e\024\uff9e\025\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e" +
    "\103\uff9e\104\uff9e\114\uff9e\001\002\000\042\002\uffd9\012" +
    "\uffd9\013\uffd9\016\uffd9\017\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\034\uffd9\035\uffd9\036\uffd9\037\uffd9\072\242\103\uffd9\104" +
    "\uffd9\114\uffd9\001\002\000\004\004\243\001\002\000\040" +
    "\002\uffd8\012\uffd8\013\uffd8\016\uffd8\017\uffd8\023\uffd8\024" +
    "\uffd8\025\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\103\uffd8" +
    "\104\uffd8\114\uffd8\001\002\000\006\063\246\116\257\001" +
    "\002\000\004\063\246\001\002\000\006\004\256\103\255" +
    "\001\002\000\036\002\uffec\012\uffec\013\uffec\016\uffec\023" +
    "\uffec\024\uffec\025\uffec\034\uffec\035\uffec\036\uffec\037\uffec" +
    "\103\uffec\104\uffec\114\uffec\001\002\000\006\062\252\063" +
    "\251\001\002\000\006\004\254\103\253\001\002\000\036" +
    "\002\uffea\012\uffea\013\uffea\016\uffea\023\uffea\024\uffea\025" +
    "\uffea\034\uffea\035\uffea\036\uffea\037\uffea\103\uffea\104\uffea" +
    "\114\uffea\001\002\000\006\062\uffe8\063\uffe8\001\002\000" +
    "\006\062\uffe9\063\uffe9\001\002\000\006\062\uffe6\063\uffe6" +
    "\001\002\000\006\062\uffe7\063\uffe7\001\002\000\006\012" +
    "\262\103\261\001\002\000\036\002\uffeb\012\uffeb\013\uffeb" +
    "\016\uffeb\023\uffeb\024\uffeb\025\uffeb\034\uffeb\035\uffeb\036" +
    "\uffeb\037\uffeb\103\uffeb\104\uffeb\114\uffeb\001\002\000\036" +
    "\002\uff96\012\uff96\013\uff96\016\uff96\023\uff96\024\uff96\025" +
    "\uff96\034\uff96\035\uff96\036\uff96\037\uff96\103\uff96\104\uff96" +
    "\114\uff96\001\002\000\004\103\264\001\002\000\036\002" +
    "\uff97\012\uff97\013\uff97\016\uff97\023\uff97\024\uff97\025\uff97" +
    "\034\uff97\035\uff97\036\uff97\037\uff97\103\uff97\104\uff97\114" +
    "\uff97\001\002\000\004\116\257\001\002\000\044\002\uffd4" +
    "\012\uffd4\013\uffd4\016\uffd4\023\uffd4\024\uffd4\025\uffd4\034" +
    "\uffd4\035\uffd4\036\uffd4\037\uffd4\063\101\064\273\072\uffd4" +
    "\103\uffd4\104\uffd4\114\uffd4\001\002\000\004\064\267\001" +
    "\002\000\004\036\270\001\002\000\004\103\271\001\002" +
    "\000\004\065\272\001\002\000\036\002\uffa0\012\uffa0\013" +
    "\uffa0\016\uffa0\023\uffa0\024\uffa0\025\uffa0\034\uffa0\035\uffa0" +
    "\036\uffa0\037\uffa0\103\uffa0\104\uffa0\114\uffa0\001\002\000" +
    "\014\034\300\035\276\036\277\037\274\040\275\001\002" +
    "\000\004\103\317\001\002\000\004\103\314\001\002\000" +
    "\004\103\311\001\002\000\004\103\306\001\002\000\004" +
    "\103\303\001\002\000\004\065\302\001\002\000\036\002" +
    "\uffae\012\uffae\013\uffae\016\uffae\023\uffae\024\uffae\025\uffae" +
    "\034\uffae\035\uffae\036\uffae\037\uffae\103\uffae\104\uffae\114" +
    "\uffae\001\002\000\006\063\304\065\uffb3\001\002\000\014" +
    "\034\300\035\276\036\277\037\274\040\275\001\002\000" +
    "\004\065\uffb8\001\002\000\006\063\307\065\uffb1\001\002" +
    "\000\014\034\300\035\276\036\277\037\274\040\275\001" +
    "\002\000\004\065\uffb6\001\002\000\006\063\312\065\uffb2" +
    "\001\002\000\014\034\300\035\276\036\277\037\274\040" +
    "\275\001\002\000\004\065\uffb7\001\002\000\006\063\315" +
    "\065\uffaf\001\002\000\014\034\300\035\276\036\277\037" +
    "\274\040\275\001\002\000\004\065\uffb4\001\002\000\006" +
    "\063\320\065\uffb0\001\002\000\014\034\300\035\276\036" +
    "\277\037\274\040\275\001\002\000\004\065\uffb5\001\002" +
    "\000\014\034\300\035\276\036\277\037\274\040\275\001" +
    "\002\000\004\065\324\001\002\000\036\002\uffb9\012\uffb9" +
    "\013\uffb9\016\uffb9\023\uffb9\024\uffb9\025\uffb9\034\uffb9\035" +
    "\uffb9\036\uffb9\037\uffb9\103\uffb9\104\uffb9\114\uffb9\001\002" +
    "\000\036\002\uffad\012\uffad\013\uffad\016\uffad\023\uffad\024" +
    "\uffad\025\uffad\034\uffad\035\uffad\036\uffad\037\uffad\103\uffad" +
    "\104\uffad\114\uffad\001\002\000\036\002\uff9d\012\uff9d\013" +
    "\uff9d\016\uff9d\023\uff9d\024\uff9d\025\uff9d\034\uff9d\035\uff9d" +
    "\036\uff9d\037\uff9d\103\uff9d\104\uff9d\114\uff9d\001\002\000" +
    "\004\002\ufffd\001\002\000\022\022\331\027\177\074\171" +
    "\075\164\101\173\102\175\103\172\110\174\001\002\000" +
    "\004\104\333\001\002\000\036\002\uff95\012\uff95\013\uff95" +
    "\016\uff95\023\uff95\024\uff95\025\uff95\034\uff95\035\uff95\036" +
    "\uff95\037\uff95\103\uff95\104\uff95\114\uff95\001\002\000\004" +
    "\115\334\001\002\000\036\002\uff94\012\uff94\013\uff94\016" +
    "\uff94\023\uff94\024\uff94\025\uff94\034\uff94\035\uff94\036\uff94" +
    "\037\uff94\103\uff94\104\uff94\114\uff94\001\002\000\036\002" +
    "\uff93\012\uff93\013\uff93\016\uff93\023\uff93\024\uff93\025\uff93" +
    "\034\uff93\035\uff93\036\uff93\037\uff93\103\uff93\104\uff93\114" +
    "\uff93\001\002\000\004\002\000\001\002\000\004\062\340" +
    "\001\002\000\036\002\uffed\012\uffed\013\uffed\016\uffed\023" +
    "\uffed\024\uffed\025\uffed\034\uffed\035\uffed\036\uffed\037\uffed" +
    "\103\uffed\104\uffed\114\uffed\001\002\000\004\002\uffff\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\056\002\014\003\006\004\021\007\034\010" +
    "\020\011\012\012\033\013\031\014\036\016\010\023\017" +
    "\024\003\026\027\027\004\031\025\032\040\033\011\034" +
    "\005\035\035\036\015\037\037\047\007\001\001\000\054" +
    "\003\006\004\021\007\034\010\020\011\012\012\033\013" +
    "\031\014\036\016\010\023\340\024\003\026\027\027\004" +
    "\031\025\032\040\033\011\034\005\035\035\036\015\037" +
    "\037\047\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\003\006\004\021\007\034\010\020\011\012\012" +
    "\033\013\031\014\036\016\010\023\326\024\003\026\027" +
    "\027\004\031\025\032\040\033\011\034\005\035\035\036" +
    "\015\037\037\047\007\001\001\000\004\015\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\240\001\001\000\004\015\224\001" +
    "\001\000\020\007\117\010\020\011\012\012\033\013\031" +
    "\014\036\016\112\001\001\000\004\015\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\224\001\001\000" +
    "\002\001\001\000\004\015\144\001\001\000\004\015\141" +
    "\001\001\000\002\001\001\000\004\015\053\001\001\000" +
    "\004\046\123\001\001\000\004\051\133\001\001\000\004" +
    "\050\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\017\162\020\165\022\160\041\161\042\167" +
    "\043\164\044\166\045\175\001\001\000\004\046\154\001" +
    "\001\000\004\050\155\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\216\001\001\000\004\021\211" +
    "\001\001\000\002\001\001\000\004\021\202\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\202\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\212\001\001\000\002\001\001\000\004\045\216" +
    "\001\001\000\002\001\001\000\004\045\217\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\231\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\257\006\247" +
    "\001\001\000\006\005\246\006\247\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\262\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\300\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\304\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\307\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\312\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\315\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\320\001" +
    "\001\000\002\001\001\000\004\025\322\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\017\162\020\165\022\160" +
    "\041\161\042\167\043\164\044\166\045\175\001\001\000" +
    "\004\040\331\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= LINEAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LINEAS ::= LINEA LINEAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEAS",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LINEAS ::= LINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEAS",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LINEAS ::= ENTER LINEAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEAS",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LINEAS ::= ENTER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEAS",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LINEA ::= READ 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LINEA ::= WRITE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LINEA ::= DEFVAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LINEA ::= OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LINEA ::= FUNCION_ITERATIVA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LINEA ::= LineaConstructor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LINEA ::= LineaDestructor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LINEA ::= Funcion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LINEA ::= FuncionesEspeciales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LINEA ::= LlamadaFuncion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LINEA ::= FuncionesMatematicas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LINEA ::= INSTANCIA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LINEA ::= INSTANCIARN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LINEA ::= DELATE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // READ ::= LEER ID PUNTOCOMA 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un LEER ID PUNTOCOMA");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("READ",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // WRITE ::= ESCRIBIR CADENA WRITEAUX 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un ESCRIBIR CADENA WRITEAUX");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WRITE",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // WRITE ::= ESCRIBIR ID WRITEAUX 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un ESCRIBIR ID WRITEAUX");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WRITE",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // WRITEAUX ::= WRITEAUXX PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WRITEAUX",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // WRITEAUXX ::= WRITEAUXX COMA CADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WRITEAUXX",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // WRITEAUXX ::= WRITEAUXX COMA ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WRITEAUXX",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // WRITEAUXX ::= COMA CADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WRITEAUXX",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // WRITEAUXX ::= COMA ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WRITEAUXX",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DEFVAR ::= VARENTERO 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un VARENTERO");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFVAR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DEFVAR ::= VARREAL 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un VARREAL");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFVAR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DEFVAR ::= VARCADENA 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un VARCADENA");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFVAR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DEFVAR ::= VARBOOLEANO 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un VARBOOLEANO");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFVAR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DEFVAR ::= VARMETODO 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un VARMETODO");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFVAR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VARENTERO ::= ENTEROR REPEATID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARENTERO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VARENTERO ::= ENTEROR REPEATID IGUAL NUMEROENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARENTERO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VARREAL ::= REALR REPEATID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VARREAL ::= REALR REPEATID IGUAL REAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VARBOOLEANO ::= BOOLEANOR REPEATID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARBOOLEANO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VARBOOLEANO ::= BOOLEANOR REPEATID IGUAL VERDADERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARBOOLEANO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VARBOOLEANO ::= BOOLEANOR REPEATID IGUAL FALSO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARBOOLEANO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VARCADENA ::= CADENAR REPEATID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARCADENA",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VARCADENA ::= CADENAR REPEATID IGUAL CADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARCADENA",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VARMETODO ::= ID_METODO REPEATID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARMETODO",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VARMETODO ::= ID_METODO REPEATID IGUAL NUEVO ID_METODO PARENTESIS1 PARENTESIS2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARMETODO",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // REPEATID ::= ID COMA REPEATID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REPEATID",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // REPEATID ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REPEATID",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERACION ::= ID IGUAL OPERANDOS 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una operación");
                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPERANDOS ::= OPERANDO_ENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDOS",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPERANDOS ::= OPERANDO_REAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDOS",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPERANDOS ::= OPERANDO_MAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDOS",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPERANDOS ::= OPERANDO_MENOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDOS",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERANDOS ::= OPERANDO_INCREMENTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDOS",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERANDOS ::= OPERANDO_DECREMENTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDOS",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPERANDOS ::= OPERANDO_LOGICOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDOS",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPERANDO_ENTERO ::= NUMEROENTERO SIGNO_MATE OPERANDO_ENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDO_ENTERO",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERANDO_ENTERO ::= NUMEROENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDO_ENTERO",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPERANDO_REAL ::= REAL SIGNO_MATE OPERANDO_REAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDO_REAL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPERANDO_REAL ::= REAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDO_REAL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPERANDO_MAS ::= MAS NUMEROENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDO_MAS",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPERANDO_MAS ::= MAS ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDO_MAS",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPERANDO_MENOS ::= MENOS NUMEROENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDO_MENOS",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPERANDO_MENOS ::= MENOS ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDO_MENOS",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERANDO_INCREMENTO ::= INCREMENTO NUMEROENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDO_INCREMENTO",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPERANDO_INCREMENTO ::= INCREMENTO ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDO_INCREMENTO",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPERANDO_DECREMENTO ::= NUMEROENTERO DECREMENTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDO_DECREMENTO",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERANDO_DECREMENTO ::= ID DECREMENTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDO_DECREMENTO",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERANDO_LOGICOS ::= ID AND OPERANDO_LOGICOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDO_LOGICOS",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPERANDO_LOGICOS ::= ID OPERANDO_LOGICOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDO_LOGICOS",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPERANDO_LOGICOS ::= OR ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDO_LOGICOS",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SIGNO_MATE ::= MAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNO_MATE",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SIGNO_MATE ::= MENOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNO_MATE",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SIGNO_MATE ::= OPERADORA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNO_MATE",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LineaConstructor ::= CONSTRUCTOR PARENTESIS1 Parametros PARENTESIS2 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un Constructor");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LineaConstructor",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Parametros ::= ENTEROR ID COMA Parametros 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un Parametro entero");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Parametros ::= REALR ID COMA Parametros 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un Parametro real");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Parametros ::= CADENAR ID COMA Parametros 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un Parametro cadena");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Parametros ::= BOOLEANOR ID COMA Parametros 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un Parametro Boleano");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Parametros ::= NULO ID COMA Parametros 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un Parametro Nulo");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Parametros ::= ENTEROR ID 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un Parametro entero al final");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Parametros ::= REALR ID 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un Parametro real al final");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Parametros ::= CADENAR ID 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un Parametro cadena al final");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Parametros ::= BOOLEANOR ID 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un Parametro booleano al final");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Parametros ::= NULO ID 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un Parametro nulo al final");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Funcion ::= ENTEROR ID PARENTESIS1 Parametros PARENTESIS2 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una Funcion");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Funcion",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LineaDestructor ::= DESTRUCTOR USOMETODO 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un Destructor");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LineaDestructor",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // FUNCION_ITERATIVA ::= DESDE DEFVAR MIENTRAS CONDICION_ITERATIVA DEC NUMEROENTERO HACER 
            {
              Object RESULT =null;
		
                            System.out.println("Encontre una funcion iterativa");
                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION_ITERATIVA",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FUNCION_ITERATIVA ::= DESDE ID MIENTRAS CONDICION_ITERATIVA DEC NUMEROENTERO HACER 
            {
              Object RESULT =null;
		
                            System.out.println("Encontre una funcion iterativa");
                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION_ITERATIVA",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FUNCION_ITERATIVA ::= DESDE OPERACION MIENTRAS CONDICION_ITERATIVA HACER 
            {
              Object RESULT =null;
		
                            System.out.println("Encontre una funcion iterativa");
                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION_ITERATIVA",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONDICION_ITERATIVA ::= ID SIGNOS_ITERATIVA NUMEROENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION_ITERATIVA",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DEC ::= INCREMENTAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DEC ::= DECREMENTAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SIGNOS_ITERATIVA ::= IGUAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS_ITERATIVA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SIGNOS_ITERATIVA ::= NOIGUAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS_ITERATIVA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SIGNOS_ITERATIVA ::= MENOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS_ITERATIVA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SIGNOS_ITERATIVA ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS_ITERATIVA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SIGNOS_ITERATIVA ::= MAYOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS_ITERATIVA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SIGNOS_ITERATIVA ::= MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS_ITERATIVA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FuncionesEspeciales ::= ENTEROR CADENAAENTERO PARENTESIS1 CADENAR ID PARENTESIS2 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una Funcion de Conversion Cadena -> Entero");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesEspeciales",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // FuncionesEspeciales ::= REALR CADENAAREAL PARENTESIS1 CADENAR ID PARENTESIS2 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una Funcion de Conversion Cadena -> Real");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesEspeciales",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // FuncionesEspeciales ::= BOOLEANOR CADENAABOOLEANO PARENTESIS1 CADENAR ID PARENTESIS2 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una Funcion de Conversion Cadena -> Boleano");
                         
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesEspeciales",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // LlamadaFuncion ::= ID_METODO USOMETODO 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una llamada a Funcion");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LlamadaFuncion",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // FuncionesMatematicas ::= REALR SENO PARENTESIS1 REALR ID PARENTESIS2 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una Funcion matemática de SENO");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesMatematicas",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // FuncionesMatematicas ::= REALR COSENO PARENTESIS1 REALR ID PARENTESIS2 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una Funcion matemática de COSENO");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesMatematicas",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // FuncionesMatematicas ::= REALR TANGENTE PARENTESIS1 REALR ID PARENTESIS2 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una Funcion matemática de TANGENTE");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesMatematicas",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FuncionesMatematicas ::= REALR LOGARITMO PARENTESIS1 REALR ID PARENTESIS2 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una Funcion matemática de LOGARITMO");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesMatematicas",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FuncionesMatematicas ::= REALR RAIZ PARENTESIS1 REALR ID PARENTESIS2 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una Funcion matemática de RAIZ");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesMatematicas",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // INSTANCIA ::= ESCRIBIR ID PUNTO INSTANCIA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTANCIA",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // INSTANCIA ::= ID 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una instancia");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTANCIA",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // INSTANCIARN ::= ID IGUAL INSTANCIAR LLAMADAFUNCION 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una instancia DESPUES DE ELIMINADA");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTANCIARN",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LLAMADAFUNCION ::= ID_METODO USOMETODO 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una llamada a Funcion");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNCION",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DELATE ::= ELIMINAR ID 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una ELIMINACION DE INSTANCIA");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DELATE",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
