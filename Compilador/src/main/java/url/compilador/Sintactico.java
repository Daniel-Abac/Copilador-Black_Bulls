
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package url.compilador;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\220\000\002\002\003\000\002\002\004\000\002\023" +
    "\004\000\002\023\003\000\002\023\004\000\002\023\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\003\005\000\002\004\005\000\002\004\005\000\002\005" +
    "\004\000\002\006\005\000\002\006\005\000\002\006\004" +
    "\000\002\006\004\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\010\004\000\002\010\006\000\002\011\004\000\002\011" +
    "\006\000\002\014\004\000\002\014\006\000\002\014\006" +
    "\000\002\012\004\000\002\012\006\000\002\013\004\000" +
    "\002\013\011\000\002\015\005\000\002\015\003\000\002" +
    "\016\005\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\020\005\000\002\020\003\000" +
    "\002\022\005\000\002\022\003\000\002\045\004\000\002" +
    "\045\004\000\002\046\004\000\002\046\004\000\002\047" +
    "\004\000\002\047\004\000\002\050\004\000\002\050\004" +
    "\000\002\051\005\000\002\051\004\000\002\051\004\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\062\005\000\002\062\005\000\002\062\005\000\002\060" +
    "\005\000\002\060\005\000\002\060\005\000\002\061\005" +
    "\000\002\061\005\000\002\061\005\000\002\061\005\000" +
    "\002\026\006\000\002\057\006\000\002\025\006\000\002" +
    "\025\006\000\002\025\006\000\002\025\006\000\002\025" +
    "\006\000\002\025\004\000\002\025\004\000\002\025\004" +
    "\000\002\025\004\000\002\025\004\000\002\031\011\000" +
    "\002\031\007\000\002\056\006\000\002\056\006\000\002" +
    "\056\006\000\002\056\006\000\002\027\004\000\002\053" +
    "\011\000\002\053\011\000\002\053\007\000\002\052\005" +
    "\000\002\054\003\000\002\054\003\000\002\055\003\000" +
    "\002\055\003\000\002\055\003\000\002\055\003\000\002" +
    "\055\003\000\002\055\003\000\002\032\010\000\002\032" +
    "\010\000\002\032\010\000\002\034\010\000\002\034\010" +
    "\000\002\034\010\000\002\034\010\000\002\034\010\000" +
    "\002\035\006\000\002\035\003\000\002\036\006\000\002" +
    "\040\004\000\002\037\004\000\002\041\005\000\002\042" +
    "\004\000\002\042\004\000\002\042\004\000\002\042\004" +
    "\000\002\043\004\000\002\043\004\000\002\043\004\000" +
    "\002\043\004\000\002\044\004\000\002\044\004\000\002" +
    "\044\004\000\002\044\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011e\000\042\012\023\013\045\016\014\023\006\024" +
    "\044\025\024\034\033\035\035\036\022\037\050\041\026" +
    "\042\037\071\020\103\025\104\047\114\005\001\002\000" +
    "\044\002\ufff5\012\ufff5\013\ufff5\016\ufff5\023\ufff5\024\ufff5" +
    "\025\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\041\ufff5\042" +
    "\ufff5\071\ufff5\103\ufff5\104\ufff5\114\ufff5\001\002\000\044" +
    "\002\ufffc\012\023\013\045\016\014\023\006\024\044\025" +
    "\024\034\033\035\035\036\022\037\050\041\026\042\037" +
    "\071\020\103\025\104\047\114\005\001\002\000\004\103" +
    "\u011f\001\002\000\044\002\ufff8\012\ufff8\013\ufff8\016\ufff8" +
    "\023\ufff8\024\ufff8\025\ufff8\034\ufff8\035\ufff8\036\ufff8\037" +
    "\ufff8\041\ufff8\042\ufff8\071\ufff8\103\ufff8\104\ufff8\114\ufff8" +
    "\001\002\000\046\002\uffdc\012\uffdc\013\uffdc\016\uffdc\017" +
    "\uffdc\023\uffdc\024\uffdc\025\uffdc\034\uffdc\035\uffdc\036\uffdc" +
    "\037\uffdc\041\uffdc\042\uffdc\071\uffdc\103\uffdc\104\uffdc\114" +
    "\uffdc\001\002\000\046\002\uffe0\012\uffe0\013\uffe0\016\uffe0" +
    "\017\uffe0\023\uffe0\024\uffe0\025\uffe0\034\uffe0\035\uffe0\036" +
    "\uffe0\037\uffe0\041\uffe0\042\uffe0\071\uffe0\103\uffe0\104\uffe0" +
    "\114\uffe0\001\002\000\004\002\u011e\001\002\000\044\002" +
    "\ufff1\012\ufff1\013\ufff1\016\ufff1\023\ufff1\024\ufff1\025\ufff1" +
    "\034\ufff1\035\ufff1\036\ufff1\037\ufff1\041\ufff1\042\ufff1\071" +
    "\ufff1\103\ufff1\104\ufff1\114\ufff1\001\002\000\016\034\u0100" +
    "\035\u0102\036\022\037\376\103\377\104\047\001\002\000" +
    "\004\002\001\001\002\000\044\002\ufffa\012\ufffa\013\ufffa" +
    "\016\ufffa\023\ufffa\024\ufffa\025\ufffa\034\ufffa\035\ufffa\036" +
    "\ufffa\037\ufffa\041\ufffa\042\ufffa\071\ufffa\103\ufffa\104\ufffa" +
    "\114\ufffa\001\002\000\044\002\ufff3\012\ufff3\013\ufff3\016" +
    "\ufff3\023\ufff3\024\ufff3\025\ufff3\034\ufff3\035\ufff3\036\ufff3" +
    "\037\ufff3\041\ufff3\042\ufff3\071\ufff3\103\ufff3\104\ufff3\114" +
    "\ufff3\001\002\000\014\034\366\035\365\036\364\037\363" +
    "\103\362\001\002\000\044\002\uffec\012\uffec\013\uffec\016" +
    "\uffec\023\uffec\024\uffec\025\uffec\034\uffec\035\uffec\036\uffec" +
    "\037\uffec\041\uffec\042\uffec\071\uffec\103\uffec\104\uffec\114" +
    "\uffec\001\002\000\004\103\060\001\002\000\006\004\337" +
    "\103\336\001\002\000\004\115\335\001\002\000\046\002" +
    "\uff82\012\uff82\013\uff82\016\uff82\023\uff82\024\uff82\025\uff82" +
    "\034\uff82\035\uff82\036\uff82\037\uff82\041\uff82\042\uff82\071" +
    "\uff82\072\243\103\uff82\104\uff82\114\uff82\001\002\000\010" +
    "\043\236\044\235\045\237\001\002\000\046\002\uffde\012" +
    "\uffde\013\uffde\016\uffde\017\uffde\023\uffde\024\uffde\025\uffde" +
    "\034\uffde\035\uffde\036\uffde\037\uffde\041\uffde\042\uffde\071" +
    "\uffde\103\uffde\104\uffde\114\uffde\001\002\000\044\002\ufff4" +
    "\012\ufff4\013\ufff4\016\ufff4\023\ufff4\024\ufff4\025\ufff4\034" +
    "\ufff4\035\ufff4\036\ufff4\037\ufff4\041\ufff4\042\ufff4\071\ufff4" +
    "\103\ufff4\104\ufff4\114\ufff4\001\002\000\044\002\uffe9\012" +
    "\uffe9\013\uffe9\016\uffe9\023\uffe9\024\uffe9\025\uffe9\034\uffe9" +
    "\035\uffe9\036\uffe9\037\uffe9\041\uffe9\042\uffe9\071\uffe9\103" +
    "\uffe9\104\uffe9\114\uffe9\001\002\000\044\002\ufff6\012\ufff6" +
    "\013\ufff6\016\ufff6\023\ufff6\024\ufff6\025\ufff6\034\ufff6\035" +
    "\ufff6\036\ufff6\037\ufff6\041\ufff6\042\ufff6\071\ufff6\103\ufff6" +
    "\104\ufff6\114\ufff6\001\002\000\006\056\204\103\202\001" +
    "\002\000\044\002\ufff7\012\ufff7\013\ufff7\016\ufff7\023\ufff7" +
    "\024\ufff7\025\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\041" +
    "\ufff7\042\ufff7\071\ufff7\103\ufff7\104\ufff7\114\ufff7\001\002" +
    "\000\020\051\143\052\144\053\146\054\141\055\142\057" +
    "\147\103\060\001\002\000\044\002\uffed\012\uffed\013\uffed" +
    "\016\uffed\023\uffed\024\uffed\025\uffed\034\uffed\035\uffed\036" +
    "\uffed\037\uffed\041\uffed\042\uffed\071\uffed\103\uffed\104\uffed" +
    "\114\uffed\001\002\000\010\046\133\047\135\050\134\001" +
    "\002\000\044\002\uffee\012\uffee\013\uffee\016\uffee\023\uffee" +
    "\024\uffee\025\uffee\034\uffee\035\uffee\036\uffee\037\uffee\041" +
    "\uffee\042\uffee\071\uffee\103\uffee\104\uffee\114\uffee\001\002" +
    "\000\044\002\ufff0\012\ufff0\013\ufff0\016\ufff0\023\ufff0\024" +
    "\ufff0\025\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\041\ufff0" +
    "\042\ufff0\071\ufff0\103\ufff0\104\ufff0\114\ufff0\001\002\000" +
    "\044\002\uffeb\012\uffeb\013\uffeb\016\uffeb\023\uffeb\024\uffeb" +
    "\025\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\041\uffeb\042" +
    "\uffeb\071\uffeb\103\uffeb\104\uffeb\114\uffeb\001\002\000\044" +
    "\002\ufffb\012\ufffb\013\ufffb\016\ufffb\023\ufffb\024\ufffb\025" +
    "\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\041\ufffb\042\ufffb" +
    "\071\ufffb\103\ufffb\104\ufffb\114\ufffb\001\002\000\004\064" +
    "\104\001\002\000\004\103\102\001\002\000\046\002\uffdd" +
    "\012\uffdd\013\uffdd\016\uffdd\017\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\041\uffdd\042\uffdd" +
    "\071\uffdd\103\uffdd\104\uffdd\114\uffdd\001\002\000\004\103" +
    "\060\001\002\000\006\060\062\103\060\001\002\000\044" +
    "\002\uffea\012\uffea\013\uffea\016\uffea\023\uffea\024\uffea\025" +
    "\uffea\034\uffea\035\uffea\036\uffea\037\uffea\041\uffea\042\uffea" +
    "\071\uffea\103\uffea\104\uffea\114\uffea\001\002\000\044\002" +
    "\ufff9\012\ufff9\013\ufff9\016\ufff9\023\ufff9\024\ufff9\025\ufff9" +
    "\034\ufff9\035\ufff9\036\ufff9\037\ufff9\041\ufff9\042\ufff9\071" +
    "\ufff9\103\ufff9\104\ufff9\114\ufff9\001\002\000\044\002\ufff2" +
    "\012\ufff2\013\ufff2\016\ufff2\023\ufff2\024\ufff2\025\ufff2\034" +
    "\ufff2\035\ufff2\036\ufff2\037\ufff2\041\ufff2\042\ufff2\071\ufff2" +
    "\103\ufff2\104\ufff2\114\ufff2\001\002\000\044\002\ufffe\012" +
    "\023\013\045\016\014\023\006\024\044\025\024\034\033" +
    "\035\035\036\022\037\050\041\026\042\037\071\020\103" +
    "\025\104\047\114\005\001\002\000\044\002\uffef\012\uffef" +
    "\013\uffef\016\uffef\023\uffef\024\uffef\025\uffef\034\uffef\035" +
    "\uffef\036\uffef\037\uffef\041\uffef\042\uffef\071\uffef\103\uffef" +
    "\104\uffef\114\uffef\001\002\000\046\002\uffdf\012\uffdf\013" +
    "\uffdf\016\uffdf\017\uffdf\023\uffdf\024\uffdf\025\uffdf\034\uffdf" +
    "\035\uffdf\036\uffdf\037\uffdf\041\uffdf\042\uffdf\071\uffdf\103" +
    "\uffdf\104\uffdf\114\uffdf\001\002\000\004\002\uffff\001\002" +
    "\000\052\002\uffcf\012\uffcf\013\uffcf\016\uffcf\017\uffcf\023" +
    "\uffcf\024\uffcf\025\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf" +
    "\041\uffcf\042\uffcf\063\072\071\uffcf\072\uffcf\103\uffcf\104" +
    "\uffcf\114\uffcf\001\002\000\050\002\uffd7\012\uffd7\013\uffd7" +
    "\016\uffd7\017\uffd7\023\uffd7\024\uffd7\025\uffd7\034\uffd7\035" +
    "\uffd7\036\uffd7\037\uffd7\041\uffd7\042\uffd7\071\uffd7\072\067" +
    "\103\uffd7\104\uffd7\114\uffd7\001\002\000\004\064\063\001" +
    "\002\000\004\036\064\001\002\000\004\103\065\001\002" +
    "\000\004\065\066\001\002\000\044\002\uff89\012\uff89\013" +
    "\uff89\016\uff89\023\uff89\024\uff89\025\uff89\034\uff89\035\uff89" +
    "\036\uff89\037\uff89\041\uff89\042\uff89\071\uff89\103\uff89\104" +
    "\uff89\114\uff89\001\002\000\006\007\071\010\070\001\002" +
    "\000\046\002\uffd5\012\uffd5\013\uffd5\016\uffd5\017\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5" +
    "\041\uffd5\042\uffd5\071\uffd5\103\uffd5\104\uffd5\114\uffd5\001" +
    "\002\000\046\002\uffd6\012\uffd6\013\uffd6\016\uffd6\017\uffd6" +
    "\023\uffd6\024\uffd6\025\uffd6\034\uffd6\035\uffd6\036\uffd6\037" +
    "\uffd6\041\uffd6\042\uffd6\071\uffd6\103\uffd6\104\uffd6\114\uffd6" +
    "\001\002\000\004\103\060\001\002\000\050\002\uffd0\012" +
    "\uffd0\013\uffd0\016\uffd0\017\uffd0\023\uffd0\024\uffd0\025\uffd0" +
    "\034\uffd0\035\uffd0\036\uffd0\037\uffd0\041\uffd0\042\uffd0\071" +
    "\uffd0\072\uffd0\103\uffd0\104\uffd0\114\uffd0\001\002\000\050" +
    "\002\uffd2\012\uffd2\013\uffd2\016\uffd2\017\uffd2\023\uffd2\024" +
    "\uffd2\025\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\041\uffd2" +
    "\042\uffd2\071\uffd2\072\075\103\uffd2\104\uffd2\114\uffd2\001" +
    "\002\000\004\111\076\001\002\000\004\104\077\001\002" +
    "\000\004\064\100\001\002\000\004\065\101\001\002\000" +
    "\046\002\uffd1\012\uffd1\013\uffd1\016\uffd1\017\uffd1\023\uffd1" +
    "\024\uffd1\025\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\041" +
    "\uffd1\042\uffd1\071\uffd1\103\uffd1\104\uffd1\114\uffd1\001\002" +
    "\000\004\062\103\001\002\000\044\002\uffe8\012\uffe8\013" +
    "\uffe8\016\uffe8\023\uffe8\024\uffe8\025\uffe8\034\uffe8\035\uffe8" +
    "\036\uffe8\037\uffe8\041\uffe8\042\uffe8\071\uffe8\103\uffe8\104" +
    "\uffe8\114\uffe8\001\002\000\014\034\111\035\107\036\110" +
    "\037\105\040\106\001\002\000\004\103\130\001\002\000" +
    "\004\103\125\001\002\000\004\103\122\001\002\000\004" +
    "\103\117\001\002\000\004\103\114\001\002\000\004\065" +
    "\113\001\002\000\044\002\uffaa\012\uffaa\013\uffaa\016\uffaa" +
    "\023\uffaa\024\uffaa\025\uffaa\034\uffaa\035\uffaa\036\uffaa\037" +
    "\uffaa\041\uffaa\042\uffaa\071\uffaa\103\uffaa\104\uffaa\114\uffaa" +
    "\001\002\000\006\063\115\065\uffa3\001\002\000\014\034" +
    "\111\035\107\036\110\037\105\040\106\001\002\000\004" +
    "\065\uffa8\001\002\000\006\063\120\065\uffa1\001\002\000" +
    "\014\034\111\035\107\036\110\037\105\040\106\001\002" +
    "\000\004\065\uffa6\001\002\000\006\063\123\065\uffa2\001" +
    "\002\000\014\034\111\035\107\036\110\037\105\040\106" +
    "\001\002\000\004\065\uffa7\001\002\000\006\063\126\065" +
    "\uff9f\001\002\000\014\034\111\035\107\036\110\037\105" +
    "\040\106\001\002\000\004\065\uffa4\001\002\000\006\063" +
    "\131\065\uffa0\001\002\000\014\034\111\035\107\036\110" +
    "\037\105\040\106\001\002\000\004\065\uffa5\001\002\000" +
    "\004\061\140\001\002\000\004\061\137\001\002\000\004" +
    "\061\136\001\002\000\044\002\uffb3\012\uffb3\013\uffb3\016" +
    "\uffb3\023\uffb3\024\uffb3\025\uffb3\034\uffb3\035\uffb3\036\uffb3" +
    "\037\uffb3\041\uffb3\042\uffb3\071\uffb3\103\uffb3\104\uffb3\114" +
    "\uffb3\001\002\000\044\002\uffb2\012\uffb2\013\uffb2\016\uffb2" +
    "\023\uffb2\024\uffb2\025\uffb2\034\uffb2\035\uffb2\036\uffb2\037" +
    "\uffb2\041\uffb2\042\uffb2\071\uffb2\103\uffb2\104\uffb2\114\uffb2" +
    "\001\002\000\044\002\uffb4\012\uffb4\013\uffb4\016\uffb4\023" +
    "\uffb4\024\uffb4\025\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4" +
    "\041\uffb4\042\uffb4\071\uffb4\103\uffb4\104\uffb4\114\uffb4\001" +
    "\002\000\004\064\176\001\002\000\004\064\172\001\002" +
    "\000\004\064\166\001\002\000\004\064\162\001\002\000" +
    "\050\002\uffd9\012\uffd9\013\uffd9\016\uffd9\017\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\041" +
    "\uffd9\042\uffd9\071\uffd9\072\160\103\uffd9\104\uffd9\114\uffd9" +
    "\001\002\000\004\064\154\001\002\000\004\064\150\001" +
    "\002\000\004\036\151\001\002\000\004\103\152\001\002" +
    "\000\004\065\153\001\002\000\044\002\uff8a\012\uff8a\013" +
    "\uff8a\016\uff8a\023\uff8a\024\uff8a\025\uff8a\034\uff8a\035\uff8a" +
    "\036\uff8a\037\uff8a\041\uff8a\042\uff8a\071\uff8a\103\uff8a\104" +
    "\uff8a\114\uff8a\001\002\000\004\035\155\001\002\000\004" +
    "\103\156\001\002\000\004\065\157\001\002\000\044\002" +
    "\uff86\012\uff86\013\uff86\016\uff86\023\uff86\024\uff86\025\uff86" +
    "\034\uff86\035\uff86\036\uff86\037\uff86\041\uff86\042\uff86\071" +
    "\uff86\103\uff86\104\uff86\114\uff86\001\002\000\004\101\161" +
    "\001\002\000\046\002\uffd8\012\uffd8\013\uffd8\016\uffd8\017" +
    "\uffd8\023\uffd8\024\uffd8\025\uffd8\034\uffd8\035\uffd8\036\uffd8" +
    "\037\uffd8\041\uffd8\042\uffd8\071\uffd8\103\uffd8\104\uffd8\114" +
    "\uffd8\001\002\000\004\035\163\001\002\000\004\103\164" +
    "\001\002\000\004\065\165\001\002\000\044\002\uff87\012" +
    "\uff87\013\uff87\016\uff87\023\uff87\024\uff87\025\uff87\034\uff87" +
    "\035\uff87\036\uff87\037\uff87\041\uff87\042\uff87\071\uff87\103" +
    "\uff87\104\uff87\114\uff87\001\002\000\004\035\167\001\002" +
    "\000\004\103\170\001\002\000\004\065\171\001\002\000" +
    "\044\002\uff88\012\uff88\013\uff88\016\uff88\023\uff88\024\uff88" +
    "\025\uff88\034\uff88\035\uff88\036\uff88\037\uff88\041\uff88\042" +
    "\uff88\071\uff88\103\uff88\104\uff88\114\uff88\001\002\000\004" +
    "\035\173\001\002\000\004\103\174\001\002\000\004\065" +
    "\175\001\002\000\044\002\uff84\012\uff84\013\uff84\016\uff84" +
    "\023\uff84\024\uff84\025\uff84\034\uff84\035\uff84\036\uff84\037" +
    "\uff84\041\uff84\042\uff84\071\uff84\103\uff84\104\uff84\114\uff84" +
    "\001\002\000\004\035\177\001\002\000\004\103\200\001" +
    "\002\000\004\065\201\001\002\000\044\002\uff85\012\uff85" +
    "\013\uff85\016\uff85\023\uff85\024\uff85\025\uff85\034\uff85\035" +
    "\uff85\036\uff85\037\uff85\041\uff85\042\uff85\071\uff85\103\uff85" +
    "\104\uff85\114\uff85\001\002\000\054\002\uffcf\012\uffcf\013" +
    "\uffcf\016\uffcf\023\uffcf\024\uffcf\025\uffcf\034\uffcf\035\uffcf" +
    "\036\uffcf\037\uffcf\041\uffcf\042\uffcf\063\072\064\213\071" +
    "\uffcf\072\uffcf\103\uffcf\104\uffcf\114\uffcf\115\214\001\002" +
    "\000\050\002\uffdb\012\uffdb\013\uffdb\016\uffdb\017\uffdb\023" +
    "\uffdb\024\uffdb\025\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb" +
    "\041\uffdb\042\uffdb\071\uffdb\072\211\103\uffdb\104\uffdb\114" +
    "\uffdb\001\002\000\004\064\205\001\002\000\004\036\206" +
    "\001\002\000\004\103\207\001\002\000\004\065\210\001" +
    "\002\000\044\002\uff8b\012\uff8b\013\uff8b\016\uff8b\023\uff8b" +
    "\024\uff8b\025\uff8b\034\uff8b\035\uff8b\036\uff8b\037\uff8b\041" +
    "\uff8b\042\uff8b\071\uff8b\103\uff8b\104\uff8b\114\uff8b\001\002" +
    "\000\004\102\212\001\002\000\046\002\uffda\012\uffda\013" +
    "\uffda\016\uffda\017\uffda\023\uffda\024\uffda\025\uffda\034\uffda" +
    "\035\uffda\036\uffda\037\uffda\041\uffda\042\uffda\071\uffda\103" +
    "\uffda\104\uffda\114\uffda\001\002\000\014\034\111\035\107" +
    "\036\110\037\105\040\106\001\002\000\004\114\215\001" +
    "\002\000\004\020\217\001\002\000\044\002\uff9d\012\uff9d" +
    "\013\uff9d\016\uff9d\023\uff9d\024\uff9d\025\uff9d\034\uff9d\035" +
    "\uff9d\036\uff9d\037\uff9d\041\uff9d\042\uff9d\071\uff9d\103\uff9d" +
    "\104\uff9d\114\uff9d\001\002\000\004\103\220\001\002\000" +
    "\012\074\222\075\224\117\221\120\223\001\002\000\004" +
    "\103\230\001\002\000\004\103\227\001\002\000\004\103" +
    "\226\001\002\000\004\103\225\001\002\000\044\002\uff9b" +
    "\012\uff9b\013\uff9b\016\uff9b\023\uff9b\024\uff9b\025\uff9b\034" +
    "\uff9b\035\uff9b\036\uff9b\037\uff9b\041\uff9b\042\uff9b\071\uff9b" +
    "\103\uff9b\104\uff9b\114\uff9b\001\002\000\044\002\uff99\012" +
    "\uff99\013\uff99\016\uff99\023\uff99\024\uff99\025\uff99\034\uff99" +
    "\035\uff99\036\uff99\037\uff99\041\uff99\042\uff99\071\uff99\103" +
    "\uff99\104\uff99\114\uff99\001\002\000\044\002\uff9c\012\uff9c" +
    "\013\uff9c\016\uff9c\023\uff9c\024\uff9c\025\uff9c\034\uff9c\035" +
    "\uff9c\036\uff9c\037\uff9c\041\uff9c\042\uff9c\071\uff9c\103\uff9c" +
    "\104\uff9c\114\uff9c\001\002\000\044\002\uff9a\012\uff9a\013" +
    "\uff9a\016\uff9a\023\uff9a\024\uff9a\025\uff9a\034\uff9a\035\uff9a" +
    "\036\uff9a\037\uff9a\041\uff9a\042\uff9a\071\uff9a\103\uff9a\104" +
    "\uff9a\114\uff9a\001\002\000\004\065\232\001\002\000\004" +
    "\114\233\001\002\000\004\020\217\001\002\000\044\002" +
    "\uff9e\012\uff9e\013\uff9e\016\uff9e\023\uff9e\024\uff9e\025\uff9e" +
    "\034\uff9e\035\uff9e\036\uff9e\037\uff9e\041\uff9e\042\uff9e\071" +
    "\uff9e\103\uff9e\104\uff9e\114\uff9e\001\002\000\004\061\242" +
    "\001\002\000\004\061\241\001\002\000\004\061\240\001" +
    "\002\000\044\002\uffaf\012\uffaf\013\uffaf\016\uffaf\023\uffaf" +
    "\024\uffaf\025\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\041" +
    "\uffaf\042\uffaf\071\uffaf\103\uffaf\104\uffaf\114\uffaf\001\002" +
    "\000\044\002\uffb1\012\uffb1\013\uffb1\016\uffb1\023\uffb1\024" +
    "\uffb1\025\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\041\uffb1" +
    "\042\uffb1\071\uffb1\103\uffb1\104\uffb1\114\uffb1\001\002\000" +
    "\044\002\uffb0\012\uffb0\013\uffb0\016\uffb0\023\uffb0\024\uffb0" +
    "\025\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\041\uffb0\042" +
    "\uffb0\071\uffb0\103\uffb0\104\uffb0\114\uffb0\001\002\000\022" +
    "\022\257\027\264\074\255\075\247\101\260\102\262\103" +
    "\256\110\261\001\002\000\046\002\uffcc\012\uffcc\013\uffcc" +
    "\016\uffcc\017\uffcc\023\uffcc\024\uffcc\025\uffcc\034\uffcc\035" +
    "\uffcc\036\uffcc\037\uffcc\041\uffcc\042\uffcc\071\uffcc\103\uffcc" +
    "\104\uffcc\114\uffcc\001\002\000\046\002\uffcb\012\uffcb\013" +
    "\uffcb\016\uffcb\017\uffcb\023\uffcb\024\uffcb\025\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\037\uffcb\041\uffcb\042\uffcb\071\uffcb\103" +
    "\uffcb\104\uffcb\114\uffcb\001\002\000\046\002\uffce\012\uffce" +
    "\013\uffce\016\uffce\017\uffce\023\uffce\024\uffce\025\uffce\034" +
    "\uffce\035\uffce\036\uffce\037\uffce\041\uffce\042\uffce\071\uffce" +
    "\103\uffce\104\uffce\114\uffce\001\002\000\006\102\334\103" +
    "\333\001\002\000\046\002\uffc9\012\uffc9\013\uffc9\016\uffc9" +
    "\017\uffc9\023\uffc9\024\uffc9\025\uffc9\034\uffc9\035\uffc9\036" +
    "\uffc9\037\uffc9\041\uffc9\042\uffc9\071\uffc9\103\uffc9\104\uffc9" +
    "\114\uffc9\001\002\000\046\002\uffc8\012\uffc8\013\uffc8\016" +
    "\uffc8\017\uffc8\023\uffc8\024\uffc8\025\uffc8\034\uffc8\035\uffc8" +
    "\036\uffc8\037\uffc8\041\uffc8\042\uffc8\071\uffc8\103\uffc8\104" +
    "\uffc8\114\uffc8\001\002\000\046\002\uffcd\012\uffcd\013\uffcd" +
    "\016\uffcd\017\uffcd\023\uffcd\024\uffcd\025\uffcd\034\uffcd\035" +
    "\uffcd\036\uffcd\037\uffcd\041\uffcd\042\uffcd\071\uffcd\103\uffcd" +
    "\104\uffcd\114\uffcd\001\002\000\044\002\uff7e\012\uff7e\013" +
    "\uff7e\016\uff7e\023\uff7e\024\uff7e\025\uff7e\034\uff7e\035\uff7e" +
    "\036\uff7e\037\uff7e\041\uff7e\042\uff7e\071\uff7e\103\uff7e\104" +
    "\uff7e\114\uff7e\001\002\000\046\002\uffca\012\uffca\013\uffca" +
    "\016\uffca\017\uffca\023\uffca\024\uffca\025\uffca\034\uffca\035" +
    "\uffca\036\uffca\037\uffca\041\uffca\042\uffca\071\uffca\103\uffca" +
    "\104\uffca\114\uffca\001\002\000\006\102\332\103\331\001" +
    "\002\000\022\026\322\027\264\072\275\076\270\077\274" +
    "\100\271\103\325\107\326\001\002\000\004\104\320\001" +
    "\002\000\054\002\uffc3\012\uffc3\013\uffc3\016\uffc3\017\uffc3" +
    "\023\uffc3\024\uffc3\025\uffc3\034\uffc3\035\uffc3\036\uffc3\037" +
    "\uffc3\041\uffc3\042\uffc3\071\uffc3\073\277\074\272\075\266" +
    "\103\uffc3\104\uffc3\114\uffc3\001\002\000\006\102\314\103" +
    "\313\001\002\000\064\002\uffc5\012\uffc5\013\uffc5\016\uffc5" +
    "\023\uffc5\024\uffc5\025\uffc5\034\uffc5\035\uffc5\036\uffc5\037" +
    "\uffc5\041\uffc5\042\uffc5\071\uffc5\072\275\073\277\074\272" +
    "\075\266\076\270\077\274\100\271\103\uffc5\104\uffc5\107" +
    "\276\114\uffc5\001\002\000\046\002\uffc7\012\uffc7\013\uffc7" +
    "\016\uffc7\017\uffc7\023\uffc7\024\uffc7\025\uffc7\034\uffc7\035" +
    "\uffc7\036\uffc7\037\uffc7\041\uffc7\042\uffc7\071\uffc7\103\uffc7" +
    "\104\uffc7\114\uffc7\001\002\000\004\103\265\001\002\000" +
    "\046\002\uffb8\012\uffb8\013\uffb8\016\uffb8\017\uffb8\023\uffb8" +
    "\024\uffb8\025\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\041" +
    "\uffb8\042\uffb8\071\uffb8\103\uffb8\104\uffb8\114\uffb8\001\002" +
    "\000\006\101\uffb6\102\uffb6\001\002\000\044\002\uff7b\012" +
    "\uff7b\013\uff7b\016\uff7b\023\uff7b\024\uff7b\025\uff7b\034\uff7b" +
    "\035\uff7b\036\uff7b\037\uff7b\041\uff7b\042\uff7b\071\uff7b\103" +
    "\uff7b\104\uff7b\114\uff7b\001\002\000\006\102\312\103\311" +
    "\001\002\000\006\102\310\103\307\001\002\000\006\101" +
    "\uffb7\102\uffb7\001\002\000\044\002\uff7a\012\uff7a\013\uff7a" +
    "\016\uff7a\023\uff7a\024\uff7a\025\uff7a\034\uff7a\035\uff7a\036" +
    "\uff7a\037\uff7a\041\uff7a\042\uff7a\071\uff7a\103\uff7a\104\uff7a" +
    "\114\uff7a\001\002\000\006\102\306\103\305\001\002\000" +
    "\006\102\304\103\303\001\002\000\046\002\uffbc\012\uffbc" +
    "\013\uffbc\016\uffbc\017\uffbc\023\uffbc\024\uffbc\025\uffbc\034" +
    "\uffbc\035\uffbc\036\uffbc\037\uffbc\041\uffbc\042\uffbc\071\uffbc" +
    "\103\uffbc\104\uffbc\114\uffbc\001\002\000\006\101\uffb5\102" +
    "\uffb5\001\002\000\004\102\302\001\002\000\046\002\uffc6" +
    "\012\uffc6\013\uffc6\016\uffc6\017\uffc6\023\uffc6\024\uffc6\025" +
    "\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\041\uffc6\042\uffc6" +
    "\071\uffc6\103\uffc6\104\uffc6\114\uffc6\001\002\000\054\002" +
    "\uffc5\012\uffc5\013\uffc5\016\uffc5\017\uffc5\023\uffc5\024\uffc5" +
    "\025\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\041\uffc5\042" +
    "\uffc5\071\uffc5\073\277\074\272\075\266\103\uffc5\104\uffc5" +
    "\114\uffc5\001\002\000\044\002\uff77\012\uff77\013\uff77\016" +
    "\uff77\023\uff77\024\uff77\025\uff77\034\uff77\035\uff77\036\uff77" +
    "\037\uff77\041\uff77\042\uff77\071\uff77\103\uff77\104\uff77\114" +
    "\uff77\001\002\000\044\002\uff73\012\uff73\013\uff73\016\uff73" +
    "\023\uff73\024\uff73\025\uff73\034\uff73\035\uff73\036\uff73\037" +
    "\uff73\041\uff73\042\uff73\071\uff73\103\uff73\104\uff73\114\uff73" +
    "\001\002\000\044\002\uff79\012\uff79\013\uff79\016\uff79\023" +
    "\uff79\024\uff79\025\uff79\034\uff79\035\uff79\036\uff79\037\uff79" +
    "\041\uff79\042\uff79\071\uff79\103\uff79\104\uff79\114\uff79\001" +
    "\002\000\044\002\uff75\012\uff75\013\uff75\016\uff75\023\uff75" +
    "\024\uff75\025\uff75\034\uff75\035\uff75\036\uff75\037\uff75\041" +
    "\uff75\042\uff75\071\uff75\103\uff75\104\uff75\114\uff75\001\002" +
    "\000\044\002\uff76\012\uff76\013\uff76\016\uff76\023\uff76\024" +
    "\uff76\025\uff76\034\uff76\035\uff76\036\uff76\037\uff76\041\uff76" +
    "\042\uff76\071\uff76\103\uff76\104\uff76\114\uff76\001\002\000" +
    "\044\002\uff72\012\uff72\013\uff72\016\uff72\023\uff72\024\uff72" +
    "\025\uff72\034\uff72\035\uff72\036\uff72\037\uff72\041\uff72\042" +
    "\uff72\071\uff72\103\uff72\104\uff72\114\uff72\001\002\000\044" +
    "\002\uff78\012\uff78\013\uff78\016\uff78\023\uff78\024\uff78\025" +
    "\uff78\034\uff78\035\uff78\036\uff78\037\uff78\041\uff78\042\uff78" +
    "\071\uff78\103\uff78\104\uff78\114\uff78\001\002\000\044\002" +
    "\uff74\012\uff74\013\uff74\016\uff74\023\uff74\024\uff74\025\uff74" +
    "\034\uff74\035\uff74\036\uff74\037\uff74\041\uff74\042\uff74\071" +
    "\uff74\103\uff74\104\uff74\114\uff74\001\002\000\046\002\uffbd" +
    "\012\uffbd\013\uffbd\016\uffbd\017\uffbd\023\uffbd\024\uffbd\025" +
    "\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\041\uffbd\042\uffbd" +
    "\071\uffbd\103\uffbd\104\uffbd\114\uffbd\001\002\000\046\002" +
    "\uffbe\012\uffbe\013\uffbe\016\uffbe\017\uffbe\023\uffbe\024\uffbe" +
    "\025\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\041\uffbe\042" +
    "\uffbe\071\uffbe\103\uffbe\104\uffbe\114\uffbe\001\002\000\004" +
    "\101\260\001\002\000\046\002\uffc4\012\uffc4\013\uffc4\016" +
    "\uffc4\017\uffc4\023\uffc4\024\uffc4\025\uffc4\034\uffc4\035\uffc4" +
    "\036\uffc4\037\uffc4\041\uffc4\042\uffc4\071\uffc4\103\uffc4\104" +
    "\uffc4\114\uffc4\001\002\000\044\002\uff81\012\uff81\013\uff81" +
    "\016\uff81\023\uff81\024\uff81\025\uff81\034\uff81\035\uff81\036" +
    "\uff81\037\uff81\041\uff81\042\uff81\071\uff81\103\uff81\104\uff81" +
    "\114\uff81\001\002\000\004\115\321\001\002\000\044\002" +
    "\uff80\012\uff80\013\uff80\016\uff80\023\uff80\024\uff80\025\uff80" +
    "\034\uff80\035\uff80\036\uff80\037\uff80\041\uff80\042\uff80\071" +
    "\uff80\103\uff80\104\uff80\114\uff80\001\002\000\006\027\264" +
    "\103\325\001\002\000\044\002\uff7d\012\uff7d\013\uff7d\016" +
    "\uff7d\023\uff7d\024\uff7d\025\uff7d\034\uff7d\035\uff7d\036\uff7d" +
    "\037\uff7d\041\uff7d\042\uff7d\071\uff7d\103\uff7d\104\uff7d\114" +
    "\uff7d\001\002\000\044\002\uff7c\012\uff7c\013\uff7c\016\uff7c" +
    "\023\uff7c\024\uff7c\025\uff7c\034\uff7c\035\uff7c\036\uff7c\037" +
    "\uff7c\041\uff7c\042\uff7c\071\uff7c\103\uff7c\104\uff7c\114\uff7c" +
    "\001\002\000\010\026\322\027\264\103\325\001\002\000" +
    "\046\002\uffbb\012\uffbb\013\uffbb\016\uffbb\017\uffbb\023\uffbb" +
    "\024\uffbb\025\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\041" +
    "\uffbb\042\uffbb\071\uffbb\103\uffbb\104\uffbb\114\uffbb\001\002" +
    "\000\046\002\uffb9\012\uffb9\013\uffb9\016\uffb9\017\uffb9\023" +
    "\uffb9\024\uffb9\025\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9" +
    "\041\uffb9\042\uffb9\071\uffb9\103\uffb9\104\uffb9\114\uffb9\001" +
    "\002\000\046\002\uffba\012\uffba\013\uffba\016\uffba\017\uffba" +
    "\023\uffba\024\uffba\025\uffba\034\uffba\035\uffba\036\uffba\037" +
    "\uffba\041\uffba\042\uffba\071\uffba\103\uffba\104\uffba\114\uffba" +
    "\001\002\000\046\002\uffc1\012\uffc1\013\uffc1\016\uffc1\017" +
    "\uffc1\023\uffc1\024\uffc1\025\uffc1\034\uffc1\035\uffc1\036\uffc1" +
    "\037\uffc1\041\uffc1\042\uffc1\071\uffc1\103\uffc1\104\uffc1\114" +
    "\uffc1\001\002\000\046\002\uffc2\012\uffc2\013\uffc2\016\uffc2" +
    "\017\uffc2\023\uffc2\024\uffc2\025\uffc2\034\uffc2\035\uffc2\036" +
    "\uffc2\037\uffc2\041\uffc2\042\uffc2\071\uffc2\103\uffc2\104\uffc2" +
    "\114\uffc2\001\002\000\046\002\uffbf\012\uffbf\013\uffbf\016" +
    "\uffbf\017\uffbf\023\uffbf\024\uffbf\025\uffbf\034\uffbf\035\uffbf" +
    "\036\uffbf\037\uffbf\041\uffbf\042\uffbf\071\uffbf\103\uffbf\104" +
    "\uffbf\114\uffbf\001\002\000\046\002\uffc0\012\uffc0\013\uffc0" +
    "\016\uffc0\017\uffc0\023\uffc0\024\uffc0\025\uffc0\034\uffc0\035" +
    "\uffc0\036\uffc0\037\uffc0\041\uffc0\042\uffc0\071\uffc0\103\uffc0" +
    "\104\uffc0\114\uffc0\001\002\000\044\002\uff98\012\uff98\013" +
    "\uff98\016\uff98\023\uff98\024\uff98\025\uff98\034\uff98\035\uff98" +
    "\036\uff98\037\uff98\041\uff98\042\uff98\071\uff98\103\uff98\104" +
    "\uff98\114\uff98\001\002\000\006\063\340\116\351\001\002" +
    "\000\004\063\340\001\002\000\006\004\350\103\347\001" +
    "\002\000\044\002\uffe7\012\uffe7\013\uffe7\016\uffe7\023\uffe7" +
    "\024\uffe7\025\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\041" +
    "\uffe7\042\uffe7\071\uffe7\103\uffe7\104\uffe7\114\uffe7\001\002" +
    "\000\006\062\344\063\343\001\002\000\006\004\346\103" +
    "\345\001\002\000\044\002\uffe5\012\uffe5\013\uffe5\016\uffe5" +
    "\023\uffe5\024\uffe5\025\uffe5\034\uffe5\035\uffe5\036\uffe5\037" +
    "\uffe5\041\uffe5\042\uffe5\071\uffe5\103\uffe5\104\uffe5\114\uffe5" +
    "\001\002\000\006\062\uffe3\063\uffe3\001\002\000\006\062" +
    "\uffe4\063\uffe4\001\002\000\006\062\uffe1\063\uffe1\001\002" +
    "\000\006\062\uffe2\063\uffe2\001\002\000\006\012\354\103" +
    "\353\001\002\000\044\002\uffe6\012\uffe6\013\uffe6\016\uffe6" +
    "\023\uffe6\024\uffe6\025\uffe6\034\uffe6\035\uffe6\036\uffe6\037" +
    "\uffe6\041\uffe6\042\uffe6\071\uffe6\103\uffe6\104\uffe6\114\uffe6" +
    "\001\002\000\044\002\uff82\012\uff82\013\uff82\016\uff82\023" +
    "\uff82\024\uff82\025\uff82\034\uff82\035\uff82\036\uff82\037\uff82" +
    "\041\uff82\042\uff82\071\uff82\103\uff82\104\uff82\114\uff82\001" +
    "\002\000\004\103\356\001\002\000\044\002\uff83\012\uff83" +
    "\013\uff83\016\uff83\023\uff83\024\uff83\025\uff83\034\uff83\035" +
    "\uff83\036\uff83\037\uff83\041\uff83\042\uff83\071\uff83\103\uff83" +
    "\104\uff83\114\uff83\001\002\000\004\116\351\001\002\000" +
    "\050\002\uffd4\012\uffd4\013\uffd4\016\uffd4\017\uffd4\023\uffd4" +
    "\024\uffd4\025\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\041" +
    "\uffd4\042\uffd4\071\uffd4\072\360\103\uffd4\104\uffd4\114\uffd4" +
    "\001\002\000\004\004\361\001\002\000\046\002\uffd3\012" +
    "\uffd3\013\uffd3\016\uffd3\017\uffd3\023\uffd3\024\uffd3\025\uffd3" +
    "\034\uffd3\035\uffd3\036\uffd3\037\uffd3\041\uffd3\042\uffd3\071" +
    "\uffd3\103\uffd3\104\uffd3\114\uffd3\001\002\000\004\072\373" +
    "\001\002\000\004\103\060\001\002\000\004\103\060\001" +
    "\002\000\004\103\060\001\002\000\004\103\060\001\002" +
    "\000\044\002\uffae\012\uffae\013\uffae\016\uffae\023\uffae\024" +
    "\uffae\025\uffae\034\uffae\035\uffae\036\uffae\037\uffae\041\uffae" +
    "\042\uffae\071\uffae\103\uffae\104\uffae\114\uffae\001\002\000" +
    "\044\002\uffad\012\uffad\013\uffad\016\uffad\023\uffad\024\uffad" +
    "\025\uffad\034\uffad\035\uffad\036\uffad\037\uffad\041\uffad\042" +
    "\uffad\071\uffad\103\uffad\104\uffad\114\uffad\001\002\000\044" +
    "\002\uffac\012\uffac\013\uffac\016\uffac\023\uffac\024\uffac\025" +
    "\uffac\034\uffac\035\uffac\036\uffac\037\uffac\041\uffac\042\uffac" +
    "\071\uffac\103\uffac\104\uffac\114\uffac\001\002\000\044\002" +
    "\uffab\012\uffab\013\uffab\016\uffab\023\uffab\024\uffab\025\uffab" +
    "\034\uffab\035\uffab\036\uffab\037\uffab\041\uffab\042\uffab\071" +
    "\uffab\103\uffab\104\uffab\114\uffab\001\002\000\004\103\374" +
    "\001\002\000\044\002\uffa9\012\uffa9\013\uffa9\016\uffa9\023" +
    "\uffa9\024\uffa9\025\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9" +
    "\041\uffa9\042\uffa9\071\uffa9\103\uffa9\104\uffa9\114\uffa9\001" +
    "\002\000\004\017\u011b\001\002\000\004\103\060\001\002" +
    "\000\006\017\u0114\072\u0113\001\002\000\004\103\060\001" +
    "\002\000\004\017\u0103\001\002\000\004\103\060\001\002" +
    "\000\004\103\u0104\001\002\000\016\072\u010f\076\u0110\077" +
    "\u0111\100\u010e\105\u010b\106\u010c\001\002\000\006\112\u0108" +
    "\113\u0106\001\002\000\004\102\uff92\001\002\000\004\102" +
    "\u0109\001\002\000\004\102\uff93\001\002\000\004\021\u010a" +
    "\001\002\000\044\002\uff97\012\uff97\013\uff97\016\uff97\023" +
    "\uff97\024\uff97\025\uff97\034\uff97\035\uff97\036\uff97\037\uff97" +
    "\041\uff97\042\uff97\071\uff97\103\uff97\104\uff97\114\uff97\001" +
    "\002\000\004\102\uff8c\001\002\000\004\102\uff8e\001\002" +
    "\000\004\102\u0112\001\002\000\004\102\uff90\001\002\000" +
    "\004\102\uff91\001\002\000\004\102\uff8f\001\002\000\004" +
    "\102\uff8d\001\002\000\010\021\uff94\112\uff94\113\uff94\001" +
    "\002\000\020\027\264\074\255\075\247\101\260\102\u011a" +
    "\103\u0119\110\261\001\002\000\004\103\u0104\001\002\000" +
    "\006\112\u0108\113\u0106\001\002\000\004\102\u0117\001\002" +
    "\000\004\021\u0118\001\002\000\044\002\uff96\012\uff96\013" +
    "\uff96\016\uff96\023\uff96\024\uff96\025\uff96\034\uff96\035\uff96" +
    "\036\uff96\037\uff96\041\uff96\042\uff96\071\uff96\103\uff96\104" +
    "\uff96\114\uff96\001\002\000\012\026\322\027\264\103\325" +
    "\107\326\001\002\000\014\017\uffc5\073\277\074\272\075" +
    "\266\107\276\001\002\000\004\103\u0104\001\002\000\004" +
    "\021\u011d\001\002\000\044\002\uff95\012\uff95\013\uff95\016" +
    "\uff95\023\uff95\024\uff95\025\uff95\034\uff95\035\uff95\036\uff95" +
    "\037\uff95\041\uff95\042\uff95\071\uff95\103\uff95\104\uff95\114" +
    "\uff95\001\002\000\004\002\000\001\002\000\044\002\uff7f" +
    "\012\uff7f\013\uff7f\016\uff7f\023\uff7f\024\uff7f\025\uff7f\034" +
    "\uff7f\035\uff7f\036\uff7f\037\uff7f\041\uff7f\042\uff7f\071\uff7f" +
    "\103\uff7f\104\uff7f\114\uff7f\001\002\000\004\002\ufffd\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011e\000\070\002\011\003\042\004\015\007\051\010" +
    "\010\011\055\012\026\013\007\014\045\016\006\023\014" +
    "\024\053\026\031\027\003\031\027\032\016\033\052\034" +
    "\012\035\040\036\054\037\037\041\035\053\033\057\020" +
    "\060\041\061\050\062\030\001\001\000\002\001\001\000" +
    "\066\003\042\004\015\007\051\010\010\011\055\012\026" +
    "\013\007\014\045\016\006\023\u011f\024\053\026\031\027" +
    "\003\031\027\032\016\033\052\034\012\035\040\036\054" +
    "\037\037\041\035\053\033\057\020\060\041\061\050\062" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\007\u0100\010\010\011\055\012\026\013\007" +
    "\014\045\016\374\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\356\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\202\001\001\000\002\001\001\000\004\015\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\073\001\001\000\004\015\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\066\003" +
    "\042\004\015\007\051\010\010\011\055\012\026\013\007" +
    "\014\045\016\006\023\056\024\053\026\031\027\003\031" +
    "\027\032\016\033\052\034\012\035\040\036\054\037\037" +
    "\041\035\053\033\057\020\060\041\061\050\062\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\131\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\230\001\001\000\002\001\001\000\004" +
    "\056\215\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\233\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\017\245\020\251\022\243\042\252\045\244\046\253" +
    "\047\247\050\250\051\262\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\043\322" +
    "\044\323\051\326\001\001\000\004\040\316\001\001\000" +
    "\004\021\314\001\001\000\002\001\001\000\010\021\277" +
    "\043\266\044\272\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\300\001\001\000" +
    "\002\001\001\000\004\021\277\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\315\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\327\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\051\326\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\351\006\341\001" +
    "\001\000\006\005\340\006\341\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\354\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\371" +
    "\001\001\000\004\015\370\001\001\000\004\015\367\001" +
    "\001\000\004\015\366\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\060" +
    "\001\001\000\002\001\001\000\004\015\202\001\001\000" +
    "\002\001\001\000\004\015\144\001\001\000\004\052\u0104" +
    "\001\001\000\004\055\u010c\001\001\000\004\054\u0106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\017\245\020\251\022\243\045\244\046\253" +
    "\047\247\050\250\051\262\001\001\000\004\052\u0114\001" +
    "\001\000\004\054\u0115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\326\001\001\000" +
    "\004\021\277\001\001\000\004\052\u011b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= LINEAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LINEAS ::= LINEA LINEAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEAS",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LINEAS ::= LINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEAS",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LINEAS ::= ENTER LINEAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEAS",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LINEAS ::= ENTER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEAS",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LINEA ::= READ 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LINEA ::= WRITE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LINEA ::= DEFVAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LINEA ::= OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LINEA ::= FUNCION_ITERATIVA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LINEA ::= LineaConstructor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LINEA ::= LineaDestructor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LINEA ::= Funcion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LINEA ::= FuncionesEspeciales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LINEA ::= LlamadaFuncion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LINEA ::= FuncionesMatematicas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LINEA ::= INSTANCIA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LINEA ::= INSTANCIARN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LINEA ::= DELATE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LINEA ::= CONBO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LINEA ::= Asignacion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LINEA ::= Propiedades 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LINEA ::= PropiedadesEspecificas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LINEA ::= DeclaracionMetodos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // READ ::= LEER ID PUNTOCOMA 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un LEER ID PUNTOCOMA");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("READ",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // WRITE ::= ESCRIBIR CADENA WRITEAUX 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un ESCRIBIR CADENA WRITEAUX");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WRITE",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // WRITE ::= ESCRIBIR ID WRITEAUX 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un ESCRIBIR ID WRITEAUX");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WRITE",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // WRITEAUX ::= WRITEAUXX PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WRITEAUX",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // WRITEAUXX ::= WRITEAUXX COMA CADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WRITEAUXX",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // WRITEAUXX ::= WRITEAUXX COMA ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WRITEAUXX",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // WRITEAUXX ::= COMA CADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WRITEAUXX",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // WRITEAUXX ::= COMA ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WRITEAUXX",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DEFVAR ::= VARENTERO 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un VARENTERO");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFVAR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DEFVAR ::= VARREAL 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un VARREAL");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFVAR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DEFVAR ::= VARCADENA 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un VARCADENA");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFVAR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DEFVAR ::= VARBOOLEANO 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un VARBOOLEANO");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFVAR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DEFVAR ::= VARMETODO 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un VARMETODO");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFVAR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VARENTERO ::= ENTEROR REPEATID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARENTERO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VARENTERO ::= ENTEROR REPEATID IGUAL NUMEROENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARENTERO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VARREAL ::= REALR REPEATID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VARREAL ::= REALR REPEATID IGUAL REAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VARBOOLEANO ::= BOOLEANOR REPEATID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARBOOLEANO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VARBOOLEANO ::= BOOLEANOR REPEATID IGUAL VERDADERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARBOOLEANO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VARBOOLEANO ::= BOOLEANOR REPEATID IGUAL FALSO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARBOOLEANO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VARCADENA ::= CADENAR REPEATID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARCADENA",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VARCADENA ::= CADENAR REPEATID IGUAL CADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARCADENA",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VARMETODO ::= ID_METODO REPEATID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARMETODO",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VARMETODO ::= ID_METODO REPEATID IGUAL NUEVO ID_METODO PARENTESIS1 PARENTESIS2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARMETODO",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // REPEATID ::= ID COMA REPEATID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REPEATID",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // REPEATID ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REPEATID",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERACION ::= ID IGUAL OPERANDOS 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una operación");
                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERANDOS ::= OPERANDO_ENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDOS",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPERANDOS ::= OPERANDO_REAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDOS",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPERANDOS ::= OPERANDO_MAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDOS",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERANDOS ::= OPERANDO_MENOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDOS",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPERANDOS ::= OPERANDO_INCREMENTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDOS",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPERANDOS ::= OPERANDO_DECREMENTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDOS",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPERANDOS ::= OPERANDO_LOGICOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDOS",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPERANDO_ENTERO ::= NUMEROENTERO SIGNO_MATE OPERANDO_ENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDO_ENTERO",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPERANDO_ENTERO ::= NUMEROENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDO_ENTERO",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPERANDO_REAL ::= REAL SIGNO_MATE OPERANDO_REAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDO_REAL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERANDO_REAL ::= REAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDO_REAL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPERANDO_MAS ::= MAS NUMEROENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDO_MAS",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPERANDO_MAS ::= MAS ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDO_MAS",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERANDO_MENOS ::= MENOS NUMEROENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDO_MENOS",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERANDO_MENOS ::= MENOS ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDO_MENOS",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPERANDO_INCREMENTO ::= INCREMENTO NUMEROENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDO_INCREMENTO",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPERANDO_INCREMENTO ::= INCREMENTO ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDO_INCREMENTO",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPERANDO_DECREMENTO ::= NUMEROENTERO DECREMENTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDO_DECREMENTO",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPERANDO_DECREMENTO ::= ID DECREMENTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDO_DECREMENTO",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPERANDO_LOGICOS ::= ID AND OPERANDO_LOGICOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDO_LOGICOS",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPERANDO_LOGICOS ::= ID OPERANDO_LOGICOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDO_LOGICOS",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPERANDO_LOGICOS ::= OR ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDO_LOGICOS",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SIGNO_MATE ::= MAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNO_MATE",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SIGNO_MATE ::= MENOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNO_MATE",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SIGNO_MATE ::= OPERADORA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNO_MATE",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DeclaracionMetodos ::= METODOS PUBLICOS DOSPUNTOS 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré la seccion de declaracion de metodos publicos");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DeclaracionMetodos",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DeclaracionMetodos ::= METODOS PRIVADOS DOSPUNTOS 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré la seccion de declaracion de metodos privados");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DeclaracionMetodos",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DeclaracionMetodos ::= METODOS PROTEGIDOS DOSPUNTOS 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré la seccion de declaracion de metodos protegidos");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DeclaracionMetodos",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Propiedades ::= PROPIEDADES PUBLICAS DOSPUNTOS 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré la seccion de propiedades publicas");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Propiedades",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Propiedades ::= PROPIEDADES PRIVADAS DOSPUNTOS 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré la declaracion de Propiedades privadas");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Propiedades",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Propiedades ::= PROPIEDADES PROTEGIDAS DOSPUNTOS 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré la declaracion de Propiedades protegidas");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Propiedades",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PropiedadesEspecificas ::= TABULADOR ENTEROR REPEATID 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una propiedad entero");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PropiedadesEspecificas",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PropiedadesEspecificas ::= TABULADOR REALR REPEATID 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una propiedad real");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PropiedadesEspecificas",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PropiedadesEspecificas ::= TABULADOR CADENAR REPEATID 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una propiedad cadena");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PropiedadesEspecificas",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PropiedadesEspecificas ::= TABULADOR BOOLEANOR REPEATID 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una propiedad boleana");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PropiedadesEspecificas",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LineaConstructor ::= CONSTRUCTOR PARENTESIS1 Parametros PARENTESIS2 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un Constructor");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LineaConstructor",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Asignacion ::= TABULADOR ID IGUAL ID 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una asignacion");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Asignacion",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Parametros ::= ENTEROR ID COMA Parametros 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un Parametro entero");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Parametros ::= REALR ID COMA Parametros 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un Parametro real");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Parametros ::= CADENAR ID COMA Parametros 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un Parametro cadena");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Parametros ::= BOOLEANOR ID COMA Parametros 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un Parametro Boleano");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Parametros ::= NULO ID COMA Parametros 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un Parametro Nulo");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Parametros ::= ENTEROR ID 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un Parametro entero al final");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Parametros ::= REALR ID 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un Parametro real al final");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Parametros ::= CADENAR ID 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un Parametro cadena al final");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Parametros ::= BOOLEANOR ID 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un Parametro booleano al final");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Parametros ::= NULO ID 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un Parametro nulo al final");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Funcion ::= ENTEROR ID PARENTESIS1 Parametros PARENTESIS2 ENTER ContenidoFuncion 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una Funcion");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Funcion",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Funcion ::= ENTEROR ID USOMETODO ENTER ContenidoFuncion 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una Funcion sin parametros");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Funcion",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ContenidoFuncion ::= DEVOLVER ID MAS ID 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré el contenido de una funcion suelta");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContenidoFuncion",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ContenidoFuncion ::= DEVOLVER ID MENOS ID 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré el contenido de una funcion suelta");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContenidoFuncion",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ContenidoFuncion ::= DEVOLVER ID MULTIPLICACION ID 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré el contenido de una funcion suelta");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContenidoFuncion",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ContenidoFuncion ::= DEVOLVER ID DIVISION ID 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré el contenido de una funcion suelta");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContenidoFuncion",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LineaDestructor ::= DESTRUCTOR USOMETODO 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un Destructor");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LineaDestructor",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // FUNCION_ITERATIVA ::= DESDE DEFVAR MIENTRAS CONDICION_ITERATIVA DEC NUMEROENTERO HACER 
            {
              Object RESULT =null;
		
                            System.out.println("Encontre una funcion iterativa");
                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION_ITERATIVA",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FUNCION_ITERATIVA ::= DESDE ID MIENTRAS CONDICION_ITERATIVA DEC NUMEROENTERO HACER 
            {
              Object RESULT =null;
		
                            System.out.println("Encontre una funcion iterativa");
                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION_ITERATIVA",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FUNCION_ITERATIVA ::= DESDE OPERACION MIENTRAS CONDICION_ITERATIVA HACER 
            {
              Object RESULT =null;
		
                            System.out.println("Encontre una funcion iterativa");
                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION_ITERATIVA",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CONDICION_ITERATIVA ::= ID SIGNOS_ITERATIVA NUMEROENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION_ITERATIVA",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DEC ::= INCREMENTAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DEC ::= DECREMENTAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SIGNOS_ITERATIVA ::= IGUAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS_ITERATIVA",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SIGNOS_ITERATIVA ::= NOIGUAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS_ITERATIVA",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SIGNOS_ITERATIVA ::= MENOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS_ITERATIVA",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SIGNOS_ITERATIVA ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS_ITERATIVA",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SIGNOS_ITERATIVA ::= MAYOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS_ITERATIVA",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SIGNOS_ITERATIVA ::= MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS_ITERATIVA",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // FuncionesEspeciales ::= ENTEROR CADENAAENTERO PARENTESIS1 CADENAR ID PARENTESIS2 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una Funcion de Conversion Cadena -> Entero");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesEspeciales",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // FuncionesEspeciales ::= REALR CADENAAREAL PARENTESIS1 CADENAR ID PARENTESIS2 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una Funcion de Conversion Cadena -> Real");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesEspeciales",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // FuncionesEspeciales ::= BOOLEANOR CADENAABOOLEANO PARENTESIS1 CADENAR ID PARENTESIS2 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una Funcion de Conversion Cadena -> Boleano");
                         
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesEspeciales",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // FuncionesMatematicas ::= REALR SENO PARENTESIS1 REALR ID PARENTESIS2 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una Funcion matemática de SENO");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesMatematicas",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // FuncionesMatematicas ::= REALR COSENO PARENTESIS1 REALR ID PARENTESIS2 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una Funcion matemática de COSENO");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesMatematicas",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // FuncionesMatematicas ::= REALR TANGENTE PARENTESIS1 REALR ID PARENTESIS2 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una Funcion matemática de TANGENTE");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesMatematicas",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // FuncionesMatematicas ::= REALR LOGARITMO PARENTESIS1 REALR ID PARENTESIS2 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una Funcion matemática de LOGARITMO");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesMatematicas",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // FuncionesMatematicas ::= REALR RAIZ PARENTESIS1 REALR ID PARENTESIS2 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una Funcion matemática de RAIZ");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesMatematicas",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // INSTANCIA ::= ESCRIBIR ID PUNTO INSTANCIA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTANCIA",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // INSTANCIA ::= ID 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una instancia");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTANCIA",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // INSTANCIARN ::= ID IGUAL INSTANCIAR LLAMADAFUNCION 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una instancia DESPUES DE ELIMINADA");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTANCIARN",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // LLAMADAFUNCION ::= ID_METODO USOMETODO 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una llamada a Funcion");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNCION",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // DELATE ::= ELIMINAR ID 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una ELIMINACION DE INSTANCIA");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DELATE",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CONBO ::= ID IGUAL CONBOLEANA 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una CONDICION BOLEANA");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONBO",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CONBOLEANA ::= ID CONBOLEANOID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONBOLEANA",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CONBOLEANA ::= ID CONBOLEANOC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONBOLEANA",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CONBOLEANA ::= NUMEROENTERO CONBOLEANOID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONBOLEANA",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CONBOLEANA ::= NUMEROENTERO CONBOLEANOC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONBOLEANA",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CONBOLEANOID ::= MAYOR ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONBOLEANOID",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CONBOLEANOID ::= MENOR ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONBOLEANOID",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CONBOLEANOID ::= IGUAL ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONBOLEANOID",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CONBOLEANOID ::= NOIGUAL ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONBOLEANOID",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CONBOLEANOC ::= MAYOR NUMEROENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONBOLEANOC",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CONBOLEANOC ::= MENOR NUMEROENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONBOLEANOC",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CONBOLEANOC ::= IGUAL NUMEROENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONBOLEANOC",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CONBOLEANOC ::= NOIGUAL NUMEROENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONBOLEANOC",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
