
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package url.compilador;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\221\000\002\002\004\000\002\002\004\000\002\063" +
    "\005\000\002\063\006\000\002\062\006\000\002\062\007" +
    "\000\002\021\005\000\002\021\004\000\002\021\004\000" +
    "\002\021\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\003\005\000\002\004\005\000\002\004\005" +
    "\000\002\005\004\000\002\006\005\000\002\006\005\000" +
    "\002\006\004\000\002\006\004\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\010\004\000\002\010\006\000\002\011\004" +
    "\000\002\011\006\000\002\014\004\000\002\014\006\000" +
    "\002\014\006\000\002\012\004\000\002\012\006\000\002" +
    "\013\004\000\002\013\011\000\002\015\005\000\002\015" +
    "\003\000\002\016\005\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\061\004\000" +
    "\002\061\004\000\002\061\004\000\002\061\003\000\002" +
    "\061\003\000\002\060\003\000\002\060\003\000\002\057" +
    "\003\000\002\057\003\000\002\043\004\000\002\043\004" +
    "\000\002\044\004\000\002\044\004\000\002\045\005\000" +
    "\002\045\004\000\002\045\004\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\056\005\000\002\056" +
    "\005\000\002\056\005\000\002\054\005\000\002\054\005" +
    "\000\002\054\005\000\002\055\005\000\002\055\005\000" +
    "\002\055\005\000\002\055\005\000\002\024\006\000\002" +
    "\053\006\000\002\023\006\000\002\023\006\000\002\023" +
    "\006\000\002\023\006\000\002\023\006\000\002\023\004" +
    "\000\002\023\004\000\002\023\004\000\002\023\004\000" +
    "\002\023\004\000\002\027\011\000\002\027\007\000\002" +
    "\052\006\000\002\052\006\000\002\052\006\000\002\025" +
    "\004\000\002\047\011\000\002\047\011\000\002\047\007" +
    "\000\002\046\005\000\002\050\003\000\002\050\003\000" +
    "\002\051\003\000\002\051\003\000\002\051\003\000\002" +
    "\051\003\000\002\051\003\000\002\051\003\000\002\030" +
    "\010\000\002\030\010\000\002\030\010\000\002\032\010" +
    "\000\002\032\010\000\002\032\010\000\002\032\010\000" +
    "\002\032\010\000\002\033\006\000\002\033\003\000\002" +
    "\034\006\000\002\036\004\000\002\035\004\000\002\037" +
    "\005\000\002\040\004\000\002\040\004\000\002\040\004" +
    "\000\002\040\004\000\002\041\004\000\002\041\004\000" +
    "\002\041\004\000\002\041\004\000\002\042\004\000\002" +
    "\042\004\000\002\042\004\000\002\042\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0122\000\004\031\006\001\002\000\004\032\014\001" +
    "\002\000\004\002\012\001\002\000\004\004\007\001\002" +
    "\000\004\114\010\001\002\000\006\031\006\032\uffff\001" +
    "\002\000\004\032\ufffe\001\002\000\004\002\000\001\002" +
    "\000\004\002\001\001\002\000\004\104\015\001\002\000" +
    "\004\114\016\001\002\000\006\071\017\114\020\001\002" +
    "\000\040\012\040\013\062\016\032\023\025\024\061\025" +
    "\041\034\050\035\052\036\037\037\065\041\043\042\054" +
    "\071\035\103\042\104\063\001\002\000\012\002\ufff8\032" +
    "\ufff8\071\017\114\020\001\002\000\006\002\ufffd\032\014" +
    "\001\002\000\004\002\ufffc\001\002\000\006\002\ufff9\032" +
    "\ufff9\001\002\000\012\002\ufff1\032\ufff1\071\ufff1\114\ufff1" +
    "\001\002\000\004\103\u0124\001\002\000\012\002\ufff4\032" +
    "\ufff4\071\ufff4\114\ufff4\001\002\000\014\002\uffd8\017\uffd8" +
    "\032\uffd8\071\uffd8\114\uffd8\001\002\000\014\002\uffdc\017" +
    "\uffdc\032\uffdc\071\uffdc\114\uffdc\001\002\000\012\002\uffed" +
    "\032\uffed\071\uffed\114\uffed\001\002\000\016\034\u0106\035" +
    "\u0108\036\037\037\u0104\103\u0105\104\063\001\002\000\012" +
    "\002\uffef\032\uffef\071\uffef\114\uffef\001\002\000\012\002" +
    "\ufff6\032\ufff6\071\ufff6\114\ufff6\001\002\000\014\034\374" +
    "\035\372\036\373\037\371\103\370\001\002\000\012\002" +
    "\uffe8\032\uffe8\071\uffe8\114\uffe8\001\002\000\004\103\075" +
    "\001\002\000\006\004\345\103\344\001\002\000\004\115" +
    "\343\001\002\000\014\002\uff81\032\uff81\071\uff81\072\256" +
    "\114\uff81\001\002\000\010\043\251\044\250\045\252\001" +
    "\002\000\014\002\uffda\017\uffda\032\uffda\071\uffda\114\uffda" +
    "\001\002\000\012\002\ufff0\032\ufff0\071\ufff0\114\ufff0\001" +
    "\002\000\012\002\uffe5\032\uffe5\071\uffe5\114\uffe5\001\002" +
    "\000\012\002\ufff2\032\ufff2\071\ufff2\114\ufff2\001\002\000" +
    "\006\056\221\103\217\001\002\000\012\002\ufff3\032\ufff3" +
    "\071\ufff3\114\ufff3\001\002\000\020\051\160\052\162\053" +
    "\163\054\156\055\157\057\164\103\075\001\002\000\012" +
    "\002\uffe9\032\uffe9\071\uffe9\114\uffe9\001\002\000\010\046" +
    "\150\047\152\050\151\001\002\000\012\002\uffea\032\uffea" +
    "\071\uffea\114\uffea\001\002\000\012\002\uffec\032\uffec\071" +
    "\uffec\114\uffec\001\002\000\012\002\uffe7\032\uffe7\071\uffe7" +
    "\114\uffe7\001\002\000\012\002\ufff7\032\ufff7\071\ufff7\114" +
    "\ufff7\001\002\000\004\064\121\001\002\000\004\103\117" +
    "\001\002\000\004\103\075\001\002\000\014\002\uffd9\017" +
    "\uffd9\032\uffd9\071\uffd9\114\uffd9\001\002\000\006\060\077" +
    "\103\075\001\002\000\012\002\uffe6\032\uffe6\071\uffe6\114" +
    "\uffe6\001\002\000\012\002\ufff5\032\ufff5\071\ufff5\114\ufff5" +
    "\001\002\000\012\002\uffee\032\uffee\071\uffee\114\uffee\001" +
    "\002\000\012\002\ufffa\032\ufffa\071\017\114\020\001\002" +
    "\000\012\002\uffeb\032\uffeb\071\uffeb\114\uffeb\001\002\000" +
    "\014\002\uffdb\017\uffdb\032\uffdb\071\uffdb\114\uffdb\001\002" +
    "\000\006\002\ufffb\032\ufffb\001\002\000\020\002\uffcb\017" +
    "\uffcb\032\uffcb\063\107\071\uffcb\072\uffcb\114\uffcb\001\002" +
    "\000\016\002\uffd3\017\uffd3\032\uffd3\071\uffd3\072\104\114" +
    "\uffd3\001\002\000\004\064\100\001\002\000\004\036\101" +
    "\001\002\000\004\103\102\001\002\000\004\065\103\001" +
    "\002\000\012\002\uff88\032\uff88\071\uff88\114\uff88\001\002" +
    "\000\006\007\106\010\105\001\002\000\014\002\uffd1\017" +
    "\uffd1\032\uffd1\071\uffd1\114\uffd1\001\002\000\014\002\uffd2" +
    "\017\uffd2\032\uffd2\071\uffd2\114\uffd2\001\002\000\004\103" +
    "\075\001\002\000\016\002\uffcc\017\uffcc\032\uffcc\071\uffcc" +
    "\072\uffcc\114\uffcc\001\002\000\016\002\uffce\017\uffce\032" +
    "\uffce\071\uffce\072\112\114\uffce\001\002\000\004\111\113" +
    "\001\002\000\004\104\114\001\002\000\004\064\115\001" +
    "\002\000\004\065\116\001\002\000\014\002\uffcd\017\uffcd" +
    "\032\uffcd\071\uffcd\114\uffcd\001\002\000\004\062\120\001" +
    "\002\000\012\002\uffe4\032\uffe4\071\uffe4\114\uffe4\001\002" +
    "\000\014\034\126\035\125\036\124\037\122\040\123\001" +
    "\002\000\004\103\145\001\002\000\004\103\142\001\002" +
    "\000\004\103\137\001\002\000\004\103\134\001\002\000" +
    "\004\103\131\001\002\000\004\065\130\001\002\000\012" +
    "\002\uffa8\032\uffa8\071\uffa8\114\uffa8\001\002\000\006\063" +
    "\132\065\uffa1\001\002\000\014\034\126\035\125\036\124" +
    "\037\122\040\123\001\002\000\004\065\uffa6\001\002\000" +
    "\006\063\135\065\uffa0\001\002\000\014\034\126\035\125" +
    "\036\124\037\122\040\123\001\002\000\004\065\uffa5\001" +
    "\002\000\006\063\140\065\uff9f\001\002\000\014\034\126" +
    "\035\125\036\124\037\122\040\123\001\002\000\004\065" +
    "\uffa4\001\002\000\006\063\143\065\uff9d\001\002\000\014" +
    "\034\126\035\125\036\124\037\122\040\123\001\002\000" +
    "\004\065\uffa2\001\002\000\006\063\146\065\uff9e\001\002" +
    "\000\014\034\126\035\125\036\124\037\122\040\123\001" +
    "\002\000\004\065\uffa3\001\002\000\004\061\155\001\002" +
    "\000\004\061\154\001\002\000\004\061\153\001\002\000" +
    "\012\002\uffb1\032\uffb1\071\uffb1\114\uffb1\001\002\000\012" +
    "\002\uffb0\032\uffb0\071\uffb0\114\uffb0\001\002\000\012\002" +
    "\uffb2\032\uffb2\071\uffb2\114\uffb2\001\002\000\004\064\213" +
    "\001\002\000\004\064\207\001\002\000\004\064\203\001" +
    "\002\000\016\002\uffd5\017\uffd5\032\uffd5\071\uffd5\072\201" +
    "\114\uffd5\001\002\000\004\064\175\001\002\000\004\064" +
    "\171\001\002\000\004\064\165\001\002\000\004\036\166" +
    "\001\002\000\004\103\167\001\002\000\004\065\170\001" +
    "\002\000\012\002\uff89\032\uff89\071\uff89\114\uff89\001\002" +
    "\000\004\035\172\001\002\000\004\103\173\001\002\000" +
    "\004\065\174\001\002\000\012\002\uff85\032\uff85\071\uff85" +
    "\114\uff85\001\002\000\004\035\176\001\002\000\004\103" +
    "\177\001\002\000\004\065\200\001\002\000\012\002\uff86" +
    "\032\uff86\071\uff86\114\uff86\001\002\000\004\101\202\001" +
    "\002\000\014\002\uffd4\017\uffd4\032\uffd4\071\uffd4\114\uffd4" +
    "\001\002\000\004\035\204\001\002\000\004\103\205\001" +
    "\002\000\004\065\206\001\002\000\012\002\uff87\032\uff87" +
    "\071\uff87\114\uff87\001\002\000\004\035\210\001\002\000" +
    "\004\103\211\001\002\000\004\065\212\001\002\000\012" +
    "\002\uff83\032\uff83\071\uff83\114\uff83\001\002\000\004\035" +
    "\214\001\002\000\004\103\215\001\002\000\004\065\216" +
    "\001\002\000\012\002\uff84\032\uff84\071\uff84\114\uff84\001" +
    "\002\000\022\002\uffcb\032\uffcb\063\107\064\230\071\uffcb" +
    "\072\uffcb\114\uffcb\115\231\001\002\000\016\002\uffd7\017" +
    "\uffd7\032\uffd7\071\uffd7\072\226\114\uffd7\001\002\000\004" +
    "\064\222\001\002\000\004\036\223\001\002\000\004\103" +
    "\224\001\002\000\004\065\225\001\002\000\012\002\uff8a" +
    "\032\uff8a\071\uff8a\114\uff8a\001\002\000\004\102\227\001" +
    "\002\000\014\002\uffd6\017\uffd6\032\uffd6\071\uffd6\114\uffd6" +
    "\001\002\000\014\034\126\035\125\036\124\037\122\040" +
    "\123\001\002\000\004\114\232\001\002\000\004\020\234" +
    "\001\002\000\012\002\uff9b\032\uff9b\071\uff9b\114\uff9b\001" +
    "\002\000\004\103\235\001\002\000\010\073\240\074\236" +
    "\075\237\001\002\000\004\103\243\001\002\000\004\103" +
    "\242\001\002\000\004\103\241\001\002\000\012\002\uff98" +
    "\032\uff98\071\uff98\114\uff98\001\002\000\012\002\uff99\032" +
    "\uff99\071\uff99\114\uff99\001\002\000\012\002\uff9a\032\uff9a" +
    "\071\uff9a\114\uff9a\001\002\000\004\065\245\001\002\000" +
    "\004\114\246\001\002\000\004\020\234\001\002\000\012" +
    "\002\uff9c\032\uff9c\071\uff9c\114\uff9c\001\002\000\004\061" +
    "\255\001\002\000\004\061\254\001\002\000\004\061\253" +
    "\001\002\000\012\002\uffad\032\uffad\071\uffad\114\uffad\001" +
    "\002\000\012\002\uffaf\032\uffaf\071\uffaf\114\uffaf\001\002" +
    "\000\012\002\uffae\032\uffae\071\uffae\114\uffae\001\002\000" +
    "\030\022\257\027\261\064\265\065\264\073\275\074\301" +
    "\075\260\101\277\102\300\103\267\110\274\001\002\000" +
    "\004\104\341\001\002\000\020\064\uffb4\065\uffb4\073\uffb4" +
    "\074\uffb4\075\uffb4\101\uffb4\102\uffb4\001\002\000\004\103" +
    "\337\001\002\000\020\064\265\065\264\073\275\074\301" +
    "\075\260\101\277\102\304\001\002\000\014\002\uffc6\017" +
    "\uffc6\032\uffc6\071\uffc6\114\uffc6\001\002\000\032\002\uffbf" +
    "\017\uffbf\032\uffbf\064\uffbf\065\uffbf\071\uffbf\073\uffbf\074" +
    "\uffbf\075\uffbf\101\uffbf\102\uffbf\114\uffbf\001\002\000\032" +
    "\002\uffc0\017\uffc0\032\uffc0\064\uffc0\065\uffc0\071\uffc0\073" +
    "\uffc0\074\uffc0\075\uffc0\101\uffc0\102\uffc0\114\uffc0\001\002" +
    "\000\014\002\uffc9\017\uffc9\032\uffc9\071\uffc9\114\uffc9\001" +
    "\002\000\022\026\327\027\261\072\310\076\311\077\313" +
    "\100\307\103\332\107\333\001\002\000\012\002\uff7d\032" +
    "\uff7d\071\uff7d\114\uff7d\001\002\000\014\002\uffc8\017\uffc8" +
    "\032\uffc8\071\uffc8\114\uffc8\001\002\000\032\002\uffc2\017" +
    "\uffc2\032\uffc2\064\265\065\264\071\uffc2\073\275\074\301" +
    "\075\260\101\277\102\304\114\uffc2\001\002\000\014\002" +
    "\uffc7\017\uffc7\032\uffc7\071\uffc7\114\uffc7\001\002\000\006" +
    "\102\325\103\324\001\002\000\020\064\uffb3\065\uffb3\073" +
    "\uffb3\074\uffb3\075\uffb3\101\uffb3\102\uffb3\001\002\000\014" +
    "\002\uffca\017\uffca\032\uffca\071\uffca\114\uffca\001\002\000" +
    "\032\002\uffbd\017\uffbd\032\uffbd\064\uffbd\065\uffbd\071\uffbd" +
    "\073\uffbd\074\uffbd\075\uffbd\101\uffbd\102\uffbd\114\uffbd\001" +
    "\002\000\042\002\uffbe\032\uffbe\064\uffbe\065\uffbe\071\uffbe" +
    "\072\310\073\uffbe\074\uffbe\075\uffbe\076\311\077\313\100" +
    "\307\101\uffbe\102\uffbe\107\305\114\uffbe\001\002\000\020" +
    "\064\uffb5\065\uffb5\073\uffb5\074\uffb5\075\uffb5\101\uffb5\102" +
    "\uffb5\001\002\000\032\002\uffc1\017\uffc1\032\uffc1\064\265" +
    "\065\264\071\uffc1\073\275\074\301\075\260\101\277\102" +
    "\304\114\uffc1\001\002\000\014\002\uffc4\017\uffc4\032\uffc4" +
    "\071\uffc4\114\uffc4\001\002\000\032\002\uffbe\017\uffbe\032" +
    "\uffbe\064\uffbe\065\uffbe\071\uffbe\073\uffbe\074\uffbe\075\uffbe" +
    "\101\uffbe\102\uffbe\114\uffbe\001\002\000\014\002\uffba\017" +
    "\uffba\032\uffba\071\uffba\114\uffba\001\002\000\012\002\uff79" +
    "\032\uff79\071\uff79\114\uff79\001\002\000\006\102\323\103" +
    "\322\001\002\000\006\102\321\103\320\001\002\000\006" +
    "\102\317\103\316\001\002\000\012\002\uff7a\032\uff7a\071" +
    "\uff7a\114\uff7a\001\002\000\006\102\315\103\314\001\002" +
    "\000\012\002\uff78\032\uff78\071\uff78\114\uff78\001\002\000" +
    "\012\002\uff74\032\uff74\071\uff74\114\uff74\001\002\000\012" +
    "\002\uff77\032\uff77\071\uff77\114\uff77\001\002\000\012\002" +
    "\uff73\032\uff73\071\uff73\114\uff73\001\002\000\012\002\uff76" +
    "\032\uff76\071\uff76\114\uff76\001\002\000\012\002\uff72\032" +
    "\uff72\071\uff72\114\uff72\001\002\000\012\002\uff75\032\uff75" +
    "\071\uff75\114\uff75\001\002\000\012\002\uff71\032\uff71\071" +
    "\uff71\114\uff71\001\002\000\014\002\uffbb\017\uffbb\032\uffbb" +
    "\071\uffbb\114\uffbb\001\002\000\014\002\uffbc\017\uffbc\032" +
    "\uffbc\071\uffbc\114\uffbc\001\002\000\014\002\uffc5\017\uffc5" +
    "\032\uffc5\071\uffc5\114\uffc5\001\002\000\006\027\261\103" +
    "\332\001\002\000\012\002\uff7c\032\uff7c\071\uff7c\114\uff7c" +
    "\001\002\000\012\002\uff7b\032\uff7b\071\uff7b\114\uff7b\001" +
    "\002\000\010\026\327\027\261\103\332\001\002\000\014" +
    "\002\uffb9\017\uffb9\032\uffb9\071\uffb9\114\uffb9\001\002\000" +
    "\014\002\uffb7\017\uffb7\032\uffb7\071\uffb7\114\uffb7\001\002" +
    "\000\014\002\uffb8\017\uffb8\032\uffb8\071\uffb8\114\uffb8\001" +
    "\002\000\014\002\uffc3\017\uffc3\032\uffc3\071\uffc3\114\uffc3" +
    "\001\002\000\014\002\uffb6\017\uffb6\032\uffb6\071\uffb6\114" +
    "\uffb6\001\002\000\012\002\uff80\032\uff80\071\uff80\114\uff80" +
    "\001\002\000\004\115\342\001\002\000\012\002\uff7f\032" +
    "\uff7f\071\uff7f\114\uff7f\001\002\000\012\002\uff97\032\uff97" +
    "\071\uff97\114\uff97\001\002\000\006\063\346\116\357\001" +
    "\002\000\004\063\346\001\002\000\006\004\356\103\355" +
    "\001\002\000\012\002\uffe3\032\uffe3\071\uffe3\114\uffe3\001" +
    "\002\000\006\062\352\063\351\001\002\000\006\004\354" +
    "\103\353\001\002\000\012\002\uffe1\032\uffe1\071\uffe1\114" +
    "\uffe1\001\002\000\006\062\uffdf\063\uffdf\001\002\000\006" +
    "\062\uffe0\063\uffe0\001\002\000\006\062\uffdd\063\uffdd\001" +
    "\002\000\006\062\uffde\063\uffde\001\002\000\006\012\362" +
    "\103\361\001\002\000\012\002\uffe2\032\uffe2\071\uffe2\114" +
    "\uffe2\001\002\000\012\002\uff81\032\uff81\071\uff81\114\uff81" +
    "\001\002\000\004\103\364\001\002\000\012\002\uff82\032" +
    "\uff82\071\uff82\114\uff82\001\002\000\004\116\357\001\002" +
    "\000\016\002\uffd0\017\uffd0\032\uffd0\071\uffd0\072\366\114" +
    "\uffd0\001\002\000\004\004\367\001\002\000\014\002\uffcf" +
    "\017\uffcf\032\uffcf\071\uffcf\114\uffcf\001\002\000\004\072" +
    "\u0101\001\002\000\004\103\075\001\002\000\004\103\075" +
    "\001\002\000\004\103\075\001\002\000\004\103\075\001" +
    "\002\000\012\002\uffac\032\uffac\071\uffac\114\uffac\001\002" +
    "\000\012\002\uffaa\032\uffaa\071\uffaa\114\uffaa\001\002\000" +
    "\012\002\uffab\032\uffab\071\uffab\114\uffab\001\002\000\012" +
    "\002\uffa9\032\uffa9\071\uffa9\114\uffa9\001\002\000\004\103" +
    "\u0102\001\002\000\012\002\uffa7\032\uffa7\071\uffa7\114\uffa7" +
    "\001\002\000\004\017\u0121\001\002\000\004\103\075\001" +
    "\002\000\006\017\u011a\072\u0119\001\002\000\004\103\075" +
    "\001\002\000\004\017\u0109\001\002\000\004\103\075\001" +
    "\002\000\004\103\u010a\001\002\000\016\072\u0114\076\u0116" +
    "\077\u0117\100\u0115\105\u0112\106\u0111\001\002\000\006\112" +
    "\u010e\113\u010d\001\002\000\004\102\u010f\001\002\000\004" +
    "\102\uff91\001\002\000\004\102\uff92\001\002\000\004\021" +
    "\u0110\001\002\000\012\002\uff96\032\uff96\071\uff96\114\uff96" +
    "\001\002\000\004\102\uff8d\001\002\000\004\102\uff8b\001" +
    "\002\000\004\102\u0118\001\002\000\004\102\uff90\001\002" +
    "\000\004\102\uff8f\001\002\000\004\102\uff8e\001\002\000" +
    "\004\102\uff8c\001\002\000\010\021\uff93\112\uff93\113\uff93" +
    "\001\002\000\026\027\261\064\265\065\264\073\275\074" +
    "\301\075\260\101\277\102\u0120\103\u011f\110\274\001\002" +
    "\000\004\103\u010a\001\002\000\006\112\u010e\113\u010d\001" +
    "\002\000\004\102\u011d\001\002\000\004\021\u011e\001\002" +
    "\000\012\002\uff95\032\uff95\071\uff95\114\uff95\001\002\000" +
    "\012\026\327\027\261\103\332\107\333\001\002\000\024" +
    "\017\uffbe\064\uffbe\065\uffbe\073\uffbe\074\uffbe\075\uffbe\101" +
    "\uffbe\102\uffbe\107\305\001\002\000\004\103\u010a\001\002" +
    "\000\004\021\u0123\001\002\000\012\002\uff94\032\uff94\071" +
    "\uff94\114\uff94\001\002\000\012\002\uff7e\032\uff7e\071\uff7e" +
    "\114\uff7e\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0122\000\006\002\004\063\003\001\001\000\004\062" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\063\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\020\001\001\000\064\003\057\004" +
    "\033\007\066\010\027\011\072\012\043\013\026\014\063" +
    "\016\025\022\070\024\046\025\023\027\044\030\032\031" +
    "\067\032\030\033\055\034\071\035\054\037\052\047\050" +
    "\053\035\054\056\055\065\056\045\001\001\000\004\021" +
    "\022\001\001\000\004\062\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\007\u0106\010\027\011\072\012\043\013" +
    "\026\014\063\016\u0102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\364\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\217" +
    "\001\001\000\002\001\001\000\004\015\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\110\001\001\000\002" +
    "\001\001\000\004\015\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\135\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\243\001\001\000\002\001\001\000\004\052" +
    "\232\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\052\246\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\017\275\020\261\040\267\043\270" +
    "\044\272\045\262\057\271\060\301\061\265\001\001\000" +
    "\004\036\337\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\020\261\057\271\060\301\061\335\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\041\327\042\330\045\333\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\020\261\057\271" +
    "\060\301\061\325\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\041\311\042\305\001\001\000\002\001\001\000" +
    "\012\020\261\057\271\060\301\061\302\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\334\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\333\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\357\006\347\001\001\000" +
    "\006\005\346\006\347\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\362\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\377\001\001" +
    "\000\004\015\376\001\001\000\004\015\375\001\001\000" +
    "\004\015\374\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\075\001\001" +
    "\000\002\001\001\000\004\015\217\001\001\000\002\001" +
    "\001\000\004\015\160\001\001\000\004\046\u010a\001\001" +
    "\000\004\051\u0112\001\001\000\004\050\u010b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\017\275\020\261\043\270\044\272\045\262\057\271" +
    "\060\301\061\265\001\001\000\004\046\u011a\001\001\000" +
    "\004\050\u011b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\333\001\001\000\002\001" +
    "\001\000\004\046\u0121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= CARGAS_BIBLIOTECAS_EXTERNAS CLASES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CARGAS_BIBLIOTECAS_EXTERNAS ::= INCLUIR CADENA ENTER 
            {
              Object RESULT =null;
		
                                    System.out.println("Encontré una BIBLIOTE EXTERNA");
                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CARGAS_BIBLIOTECAS_EXTERNAS",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CARGAS_BIBLIOTECAS_EXTERNAS ::= INCLUIR CADENA ENTER CARGAS_BIBLIOTECAS_EXTERNAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CARGAS_BIBLIOTECAS_EXTERNAS",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CLASES ::= CLASE ID_METODO ENTER LINEAS 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una CLASE");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASES",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CLASES ::= CLASE ID_METODO ENTER LINEAS CLASES 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré varias clases");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASES",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LINEAS ::= TABULADOR LINEA LINEAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEAS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LINEAS ::= TABULADOR LINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEAS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LINEAS ::= ENTER LINEAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEAS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LINEAS ::= ENTER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEAS",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LINEA ::= READ 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LINEA ::= WRITE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LINEA ::= DEFVAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LINEA ::= OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LINEA ::= FUNCION_ITERATIVA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LINEA ::= LineaConstructor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LINEA ::= LineaDestructor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LINEA ::= Funcion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LINEA ::= FuncionesEspeciales 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LINEA ::= LlamadaFuncion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LINEA ::= FuncionesMatematicas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LINEA ::= INSTANCIA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LINEA ::= INSTANCIARN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LINEA ::= DELATE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LINEA ::= CONBO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LINEA ::= Asignacion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LINEA ::= Propiedades 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LINEA ::= PropiedadesEspecificas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LINEA ::= DeclaracionMetodos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LINEA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // READ ::= LEER ID PUNTOCOMA 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un LEER ID PUNTOCOMA");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("READ",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // WRITE ::= ESCRIBIR CADENA WRITEAUX 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un ESCRIBIR CADENA WRITEAUX");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WRITE",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // WRITE ::= ESCRIBIR ID WRITEAUX 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un ESCRIBIR ID WRITEAUX");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WRITE",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // WRITEAUX ::= WRITEAUXX PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WRITEAUX",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // WRITEAUXX ::= WRITEAUXX COMA CADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WRITEAUXX",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // WRITEAUXX ::= WRITEAUXX COMA ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WRITEAUXX",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // WRITEAUXX ::= COMA CADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WRITEAUXX",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // WRITEAUXX ::= COMA ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WRITEAUXX",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DEFVAR ::= VARENTERO 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un VARENTERO");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFVAR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DEFVAR ::= VARREAL 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un VARREAL");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFVAR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DEFVAR ::= VARCADENA 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un VARCADENA");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFVAR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DEFVAR ::= VARBOOLEANO 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un VARBOOLEANO");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFVAR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DEFVAR ::= VARMETODO 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un VARMETODO");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFVAR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VARENTERO ::= ENTEROR REPEATID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARENTERO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VARENTERO ::= ENTEROR REPEATID IGUAL NUMEROENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARENTERO",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VARREAL ::= REALR REPEATID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VARREAL ::= REALR REPEATID IGUAL REAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARREAL",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VARBOOLEANO ::= BOOLEANOR REPEATID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARBOOLEANO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VARBOOLEANO ::= BOOLEANOR REPEATID IGUAL VERDADERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARBOOLEANO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VARBOOLEANO ::= BOOLEANOR REPEATID IGUAL FALSO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARBOOLEANO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VARCADENA ::= CADENAR REPEATID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARCADENA",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VARCADENA ::= CADENAR REPEATID IGUAL CADENA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARCADENA",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VARMETODO ::= ID_METODO REPEATID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARMETODO",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VARMETODO ::= ID_METODO REPEATID IGUAL NUEVO ID_METODO PARENTESIS1 PARENTESIS2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARMETODO",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // REPEATID ::= ID COMA REPEATID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REPEATID",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // REPEATID ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REPEATID",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERACION ::= ID IGUAL OPERANDOS 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una operación");
                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPERANDOS ::= OPERACIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDOS",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPERANDOS ::= OPERANDO_INCREMENTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDOS",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPERANDOS ::= OPERANDO_DECREMENTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDOS",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPERANDOS ::= OPERANDO_LOGICOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDOS",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPERACIONES ::= NUMEROS OPERACIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPERACIONES ::= PARENTESIS OPERACIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERACIONES ::= SIGNO_MATE OPERACIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPERACIONES ::= NUMEROS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPERACIONES ::= PARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACIONES",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PARENTESIS ::= PARENTESIS1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARENTESIS",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PARENTESIS ::= PARENTESIS2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARENTESIS",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NUMEROS ::= NUMEROENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NUMEROS",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NUMEROS ::= REAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NUMEROS",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPERANDO_INCREMENTO ::= INCREMENTO NUMEROENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDO_INCREMENTO",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPERANDO_INCREMENTO ::= INCREMENTO ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDO_INCREMENTO",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPERANDO_DECREMENTO ::= NUMEROENTERO DECREMENTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDO_DECREMENTO",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPERANDO_DECREMENTO ::= ID DECREMENTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDO_DECREMENTO",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPERANDO_LOGICOS ::= ID AND OPERANDO_LOGICOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDO_LOGICOS",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPERANDO_LOGICOS ::= ID OPERANDO_LOGICOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDO_LOGICOS",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPERANDO_LOGICOS ::= OR ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERANDO_LOGICOS",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SIGNO_MATE ::= MAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNO_MATE",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SIGNO_MATE ::= MENOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNO_MATE",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SIGNO_MATE ::= OPERADORA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNO_MATE",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DeclaracionMetodos ::= METODOS PUBLICOS DOSPUNTOS 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré la seccion de declaracion de metodos publicos");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DeclaracionMetodos",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DeclaracionMetodos ::= METODOS PRIVADOS DOSPUNTOS 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré la seccion de declaracion de metodos privados");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DeclaracionMetodos",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DeclaracionMetodos ::= METODOS PROTEGIDOS DOSPUNTOS 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré la seccion de declaracion de metodos protegidos");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DeclaracionMetodos",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Propiedades ::= PROPIEDADES PUBLICAS DOSPUNTOS 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré la seccion de propiedades publicas");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Propiedades",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Propiedades ::= PROPIEDADES PRIVADAS DOSPUNTOS 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré la declaracion de Propiedades privadas");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Propiedades",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Propiedades ::= PROPIEDADES PROTEGIDAS DOSPUNTOS 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré la declaracion de Propiedades protegidas");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Propiedades",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PropiedadesEspecificas ::= TABULADOR ENTEROR REPEATID 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una propiedad entero");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PropiedadesEspecificas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PropiedadesEspecificas ::= TABULADOR REALR REPEATID 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una propiedad real");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PropiedadesEspecificas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PropiedadesEspecificas ::= TABULADOR CADENAR REPEATID 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una propiedad cadena");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PropiedadesEspecificas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PropiedadesEspecificas ::= TABULADOR BOOLEANOR REPEATID 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una propiedad boleana");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PropiedadesEspecificas",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LineaConstructor ::= CONSTRUCTOR PARENTESIS1 Parametros PARENTESIS2 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un Constructor");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LineaConstructor",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Asignacion ::= TABULADOR ID IGUAL ID 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una asignacion");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Asignacion",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Parametros ::= ENTEROR ID COMA Parametros 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un Parametro entero");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Parametros ::= REALR ID COMA Parametros 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un Parametro real");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Parametros ::= CADENAR ID COMA Parametros 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un Parametro cadena");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Parametros ::= BOOLEANOR ID COMA Parametros 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un Parametro Boleano");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Parametros ::= NULO ID COMA Parametros 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un Parametro Nulo");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Parametros ::= ENTEROR ID 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un Parametro entero al final");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Parametros ::= REALR ID 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un Parametro real al final");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Parametros ::= CADENAR ID 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un Parametro cadena al final");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Parametros ::= BOOLEANOR ID 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un Parametro booleano al final");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Parametros ::= NULO ID 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un Parametro nulo al final");
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Funcion ::= ENTEROR ID PARENTESIS1 Parametros PARENTESIS2 ENTER ContenidoFuncion 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una Funcion");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Funcion",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Funcion ::= ENTEROR ID USOMETODO ENTER ContenidoFuncion 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una Funcion sin parametros");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Funcion",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ContenidoFuncion ::= DEVOLVER ID MAS ID 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré el contenido de una funcion suelta");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContenidoFuncion",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ContenidoFuncion ::= DEVOLVER ID MENOS ID 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré el contenido de una funcion suelta");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContenidoFuncion",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ContenidoFuncion ::= DEVOLVER ID OPERADORA ID 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré el contenido de una funcion suelta");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContenidoFuncion",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // LineaDestructor ::= DESTRUCTOR USOMETODO 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré un Destructor");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LineaDestructor",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FUNCION_ITERATIVA ::= DESDE DEFVAR MIENTRAS CONDICION_ITERATIVA DEC NUMEROENTERO HACER 
            {
              Object RESULT =null;
		
                            System.out.println("Encontre una funcion iterativa");
                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION_ITERATIVA",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FUNCION_ITERATIVA ::= DESDE ID MIENTRAS CONDICION_ITERATIVA DEC NUMEROENTERO HACER 
            {
              Object RESULT =null;
		
                            System.out.println("Encontre una funcion iterativa");
                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION_ITERATIVA",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // FUNCION_ITERATIVA ::= DESDE OPERACION MIENTRAS CONDICION_ITERATIVA HACER 
            {
              Object RESULT =null;
		
                            System.out.println("Encontre una funcion iterativa");
                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION_ITERATIVA",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CONDICION_ITERATIVA ::= ID SIGNOS_ITERATIVA NUMEROENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION_ITERATIVA",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DEC ::= INCREMENTAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DEC ::= DECREMENTAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEC",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SIGNOS_ITERATIVA ::= IGUAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS_ITERATIVA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SIGNOS_ITERATIVA ::= NOIGUAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS_ITERATIVA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SIGNOS_ITERATIVA ::= MENOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS_ITERATIVA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SIGNOS_ITERATIVA ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS_ITERATIVA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SIGNOS_ITERATIVA ::= MAYOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS_ITERATIVA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SIGNOS_ITERATIVA ::= MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS_ITERATIVA",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // FuncionesEspeciales ::= ENTEROR CADENAAENTERO PARENTESIS1 CADENAR ID PARENTESIS2 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una Funcion de Conversion Cadena -> Entero");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesEspeciales",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // FuncionesEspeciales ::= REALR CADENAAREAL PARENTESIS1 CADENAR ID PARENTESIS2 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una Funcion de Conversion Cadena -> Real");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesEspeciales",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // FuncionesEspeciales ::= BOOLEANOR CADENAABOOLEANO PARENTESIS1 CADENAR ID PARENTESIS2 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una Funcion de Conversion Cadena -> Boleano");
                         
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesEspeciales",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // FuncionesMatematicas ::= REALR SENO PARENTESIS1 REALR ID PARENTESIS2 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una Funcion matemática de SENO");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesMatematicas",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // FuncionesMatematicas ::= REALR COSENO PARENTESIS1 REALR ID PARENTESIS2 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una Funcion matemática de COSENO");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesMatematicas",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // FuncionesMatematicas ::= REALR TANGENTE PARENTESIS1 REALR ID PARENTESIS2 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una Funcion matemática de TANGENTE");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesMatematicas",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // FuncionesMatematicas ::= REALR LOGARITMO PARENTESIS1 REALR ID PARENTESIS2 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una Funcion matemática de LOGARITMO");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesMatematicas",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // FuncionesMatematicas ::= REALR RAIZ PARENTESIS1 REALR ID PARENTESIS2 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una Funcion matemática de RAIZ");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesMatematicas",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // INSTANCIA ::= ESCRIBIR ID PUNTO INSTANCIA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTANCIA",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // INSTANCIA ::= ID 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una instancia");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTANCIA",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // INSTANCIARN ::= ID IGUAL INSTANCIAR LLAMADAFUNCION 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una instancia DESPUES DE ELIMINADA");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTANCIARN",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // LLAMADAFUNCION ::= ID_METODO USOMETODO 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una llamada a Funcion");
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNCION",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // DELATE ::= ELIMINAR ID 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una ELIMINACION DE INSTANCIA");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DELATE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CONBO ::= ID IGUAL CONBOLEANA 
            {
              Object RESULT =null;
		
                            System.out.println("Encontré una CONDICION BOLEANA");
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONBO",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CONBOLEANA ::= ID CONBOLEANOID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONBOLEANA",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CONBOLEANA ::= ID CONBOLEANOC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONBOLEANA",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CONBOLEANA ::= NUMEROENTERO CONBOLEANOID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONBOLEANA",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CONBOLEANA ::= NUMEROENTERO CONBOLEANOC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONBOLEANA",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CONBOLEANOID ::= MAYOR ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONBOLEANOID",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CONBOLEANOID ::= MENOR ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONBOLEANOID",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CONBOLEANOID ::= IGUAL ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONBOLEANOID",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CONBOLEANOID ::= NOIGUAL ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONBOLEANOID",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CONBOLEANOC ::= MAYOR NUMEROENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONBOLEANOC",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CONBOLEANOC ::= MENOR NUMEROENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONBOLEANOC",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CONBOLEANOC ::= IGUAL NUMEROENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONBOLEANOC",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CONBOLEANOC ::= NOIGUAL NUMEROENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONBOLEANOC",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
